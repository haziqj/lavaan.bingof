[{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://haziqj.ml/lavaan.bingof/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"probability-based-sample","dir":"Articles","previous_headings":"","what":"Probability-based sample","title":"Complex sampling procedure","text":"probability based sampling procedure may implemented one three ways described .","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"stratified-sampling","dir":"Articles","previous_headings":"Probability-based sample","what":"Stratified sampling","title":"Complex sampling procedure","text":"school type (strata), select 1000 students (PSU) using SRS. Let \\(N_a\\) total number students stratum \\(\\\\{1,2,3\\}\\). probability selection student stratum \\(\\) \\(\\Pr(\\text{selection}) = \\frac{1000}{N_a}\\). total sample size \\(n= 3 \\times 1000 = 3000\\).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"two-stage-cluster-sampling","dir":"Articles","previous_headings":"Probability-based sample","what":"Two-stage cluster sampling","title":"Complex sampling procedure","text":"Select 140 schools (PSU; clusters) using probabilities proportional size (PPS). school, select one class SRS, students class added sample. probability selection student PSU \\(b=1,\\dots,2000\\) \\[ \\Pr(\\text{selection}) = \\Pr(\\text{weighted school selection}) \\times \\frac{1}{\\# \\text{ classes school }b}. \\] total sample size vary sample sample, average \\(n = 140 \\times 21.5 = 3010\\), \\(\\frac{15 \\times 400 + 25 \\times 1000 + 20 \\times 600}{3} = 21.5\\) average class size per school.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"two-stage-stratified-cluster-sampling","dir":"Articles","previous_headings":"Probability-based sample","what":"Two-stage stratified cluster sampling","title":"Complex sampling procedure","text":"school type (strata), select 50 schools using SRS. , within school, select 1 class SRS, students class added sample. probability selection student PSU \\(b\\) school type \\(\\) \\[ \\Pr(\\text{selection}) = \\frac{50}{\\# \\text{ schools type } } \\times \\frac{1}{\\# \\text{ classes school }b}. \\] , expected sample size \\(n=50 \\times (15 + 25 + 20) = 3000\\).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"generating-the-population-data","dir":"Articles","previous_headings":"","what":"Generating the population data","title":"Complex sampling procedure","text":"purposes checking data generation process, use Model 1 parameters generate response patterns. , assume 1 factor model \\(p=5\\) observed response items. true model parameter values \\({\\boldsymbol\\theta}\\) (loadings thresholds) follows:","code":"#> lambda1 lambda2 lambda3 lambda4 lambda5    tau1    tau2    tau3    tau4    tau5  #>    0.80    0.70    0.47    0.38    0.34   -1.43   -0.55   -0.13   -0.72   -1.13"},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"comparison-of-population-and-model-implied-moments","dir":"Articles","previous_headings":"Generating the population data","what":"Comparison of population and model-implied moments","title":"Complex sampling procedure","text":"","code":"# Univariate moments (model-implied) round(pi1, 4) #>     y1     y2     y3     y4     y5  #> 0.9236 0.7088 0.5517 0.7642 0.8708  # Univariate moments (population statistics) round(prop1, 4) #>     y1     y2     y3     y4     y5  #> 0.9240 0.7083 0.5515 0.7643 0.8709  # Errors (percentage) round((prop1 - pi1) / pi1 * 100, 2) #>    y1    y2    y3    y4    y5  #>  0.04 -0.07 -0.03  0.01  0.01"},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"model-fit","dir":"Articles","previous_headings":"Generating the population data","what":"Model fit","title":"Complex sampling procedure","text":"","code":"# Comparison of lambda values round(coef(fit), 2)[1:5] #> eta1=~y1 eta1=~y2 eta1=~y3 eta1=~y4 eta1=~y5  #>     0.80     0.70     0.47     0.38     0.34 true_vals[1:5] #> lambda1 lambda2 lambda3 lambda4 lambda5  #>    0.80    0.70    0.47    0.38    0.34  # Comparison of threshold values round(coef(fit), 2)[-(1:5)] #> y1|t1 y2|t1 y3|t1 y4|t1 y5|t1  #> -1.43 -0.55 -0.13 -0.72 -1.13 true_vals[-(1:5)] #>  tau1  tau2  tau3  tau4  tau5  #> -1.43 -0.55 -0.13 -0.72 -1.13"},{"path":[]},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"distribution-within-schools-psu-clusters","dir":"Articles","previous_headings":"Generating the population data","what":"Distribution within schools (PSU clusters)","title":"Complex sampling procedure","text":"\\(y_1\\) \\(y_2\\) \\(y_3\\) \\(y_4\\) \\(y_5\\)","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"performing-a-complex-sampling-procedure","dir":"Articles","previous_headings":"","what":"Performing a complex sampling procedure","title":"Complex sampling procedure","text":"three functions perform three complex sampling procedures described earlier.","code":"# Stratified sampling (samp1 <- gen_data_bin_strat(population = pop, seed = 123)) #> # A tibble: 3,000 × 9 #>    type  school class    wt y1    y2    y3    y4    y5    #>    <chr> <chr>  <chr> <dbl> <ord> <ord> <ord> <ord> <ord> #>  1 A     A1     A1ab  0.599 1     1     1     1     1     #>  2 A     A1     A1y   0.599 1     1     1     1     1     #>  3 A     A10    A10a  0.599 1     1     1     1     1     #>  4 A     A10    A10b  0.599 1     1     1     0     1     #>  5 A     A10    A10i  0.599 1     1     1     1     1     #>  6 A     A10    A10s  0.599 1     1     1     1     0     #>  7 A     A101   A101g 0.599 1     1     0     1     1     #>  8 A     A101   A101l 0.599 1     1     1     1     1     #>  9 A     A101   A101q 0.599 1     1     0     1     1     #> 10 A     A101   A101v 0.599 1     1     1     1     1     #> # ℹ 2,990 more rows  # Two-stage cluster sampling (samp2 <- gen_data_bin_clust(population = pop, seed = 123)) #> # A tibble: 3,155 × 9 #>    type  school class    wt y1    y2    y3    y4    y5    #>    <chr> <chr>  <chr> <dbl> <ord> <ord> <ord> <ord> <ord> #>  1 A     A100   A100l  1.48 1     1     1     1     1     #>  2 A     A100   A100l  1.48 1     1     0     1     1     #>  3 A     A100   A100l  1.48 1     1     1     1     1     #>  4 A     A100   A100l  1.48 1     1     1     0     1     #>  5 A     A100   A100l  1.48 1     1     1     1     1     #>  6 A     A100   A100l  1.48 1     1     1     1     1     #>  7 A     A100   A100l  1.48 1     1     0     1     1     #>  8 A     A100   A100l  1.48 1     1     1     1     0     #>  9 A     A100   A100l  1.48 1     1     0     0     1     #> 10 A     A100   A100l  1.48 1     1     1     1     1     #> # ℹ 3,145 more rows  # Two-stage stratified cluster sampling (samp3 <- gen_data_bin_strcl(population = pop, seed = 123)) #> # A tibble: 3,039 × 9 #>    type  school class    wt y1    y2    y3    y4    y5    #>    <chr> <chr>  <chr> <dbl> <ord> <ord> <ord> <ord> <ord> #>  1 A     A109   A109b 0.740 1     1     1     1     1     #>  2 A     A109   A109b 0.740 1     1     1     1     1     #>  3 A     A109   A109b 0.740 1     1     1     0     1     #>  4 A     A109   A109b 0.740 1     1     1     1     1     #>  5 A     A109   A109b 0.740 1     1     1     1     1     #>  6 A     A109   A109b 0.740 1     1     1     0     1     #>  7 A     A109   A109b 0.740 1     1     1     1     1     #>  8 A     A109   A109b 0.740 1     1     1     1     1     #>  9 A     A109   A109b 0.740 1     1     0     1     1     #> 10 A     A109   A109b 0.740 1     1     1     1     1     #> # ℹ 3,029 more rows"},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"check-bias-in-model-fit","dir":"Articles","previous_headings":"Performing a complex sampling procedure","what":"Check bias in model fit","title":"Complex sampling procedure","text":"check bias model fit, following: Generate data sets using gen_data_bin_complex() stratified, cluster, stratified cluster methods. Fit factor model using lavaan compare estimates true parameter values true_vals. Repeat steps 1 & 2 total 1,000 times.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"estimating-the-multinomial-covariance-matrix","dir":"Articles","previous_headings":"","what":"Estimating the multinomial covariance matrix","title":"Complex sampling procedure","text":"Let \\({\\mathbf p}\\) \\(R \\times 1\\) vector sample proportions (response patterns) corresponding vector population proportions \\({\\boldsymbol\\pi}\\). Assuming iid observations, \\[\\begin{equation} \\sqrt n ({\\mathbf p}- {\\boldsymbol\\pi}) \\xrightarrow{\\text D}{\\mathop{\\mathrm{N}}}_{R}({\\mathbf 0},{\\boldsymbol\\Sigma}), \\tag{1} \\end{equation}\\] \\({\\boldsymbol\\Sigma}= \\mathop{\\mathrm{diag}}({\\boldsymbol\\pi}) - {\\boldsymbol\\pi}{\\boldsymbol\\pi}^\\top\\). simple random sampling procedure, \\({\\boldsymbol\\Sigma}\\) may estimated using \\(\\hat{\\boldsymbol\\Sigma}= \\mathop{\\mathrm{diag}}(\\hat{\\boldsymbol\\pi}) - \\hat{\\boldsymbol\\pi}\\hat{\\boldsymbol\\pi}^\\top\\), \\(\\hat{\\boldsymbol\\pi}\\) estimated value population proportions based null hypothesis tested \\(H_0: {\\boldsymbol\\pi}= {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\). complex sampling procedure, proportions appearing (1) replaced weighted version elements \\[\\begin{equation} {\\mathbf p}_r = \\frac{\\sum_h w_h [{\\mathbf y}^{(h)} = {\\mathbf y}_r]}{\\sum_h w_h}, \\hspace{2em} r=1,\\dots,R. \\end{equation}\\] convenience, may total normalisation weights \\(\\sum_h w_h=n\\), sample size. suitable conditions, central limit theorem (1) still applies, although covariance matrix \\({\\boldsymbol\\Sigma}\\) need now take multinomial form. now discuss estimate \\({\\boldsymbol\\Sigma}\\) stratified multistage sample scheme strata labelled \\(=1,\\dots,N_S\\) PSUs labelled \\(b=1,\\dots,n_a\\), \\(n_a\\) number PSUs selected stratum \\(\\). Let \\({\\mathcal S}_{ab}\\) set sample units contained within PSU \\(b\\) within stratum \\(\\). Define \\[\\begin{equation} {\\mathbf u}_{ab} = \\sum_{h \\{\\mathcal S}_{ab}} w_h ({\\mathbf y}^{(h)} - \\hat{\\boldsymbol\\pi}). \\end{equation}\\] One may think ‘deviations mean’ units PSU \\(b\\) within stratum \\(\\). define \\[\\begin{equation} \\bar{\\mathbf u}_a = \\frac{1}{n_a} \\sum_{b=1}^{n_a} {\\mathbf u}_{ab}, \\end{equation}\\] average deviations stratum \\(\\). , standard estimator \\({\\boldsymbol\\Sigma}\\) given \\[\\begin{equation} \\hat{\\boldsymbol\\Sigma}= \\frac{1}{n} \\sum_a \\frac{n_a}{n_a-1} \\sum_b ({\\mathbf u}_{ab} - \\bar{\\mathbf u}_a)({\\mathbf u}_{ab} - \\bar{\\mathbf u}_a)^\\top. \\end{equation}\\] three complex sampling procedures discussed earlier, (Stratified sampling) three strata \\(=1,2,3\\) corresponding school types, PSUs individual students within schools stratum. equal size taken per stratum, \\(n_a=1000\\), thus sample units \\({\\mathcal S}_{ab}\\) lists students various schools classes within stratum \\(\\) (sum \\(b\\)). (Two-stage cluster sampling) case, 1 stratum, \\(n_a=n\\) \\({\\mathbf u}_a=0\\). (Two-stage stratified cluster sampling) 1, sample units \\({\\mathcal S}_{ab}\\) lists students school \\(b\\) (selected class) within stratum \\(\\).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/complex_sampling.html","id":"comparison-of-estimates","dir":"Articles","previous_headings":"Estimating the multinomial covariance matrix","what":"Comparison of estimates","title":"Complex sampling procedure","text":"Note: \\({\\boldsymbol\\Sigma}\\) matrix appearing plots standardised plots show correlation matrices instead. tetrachoric correlations, instead correlations assuming responses numeric 0s 1s.  Stratified sample Cluster sample Stratified cluster sample","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/intro.html","id":"assessing-model-fit","dir":"Articles","previous_headings":"","what":"Assessing model fit","title":"Introduction","text":"Assessing goodness fit models data can challenging. Traditional tests, Pearson chi-square test likelihood ratio \\(G\\) test, may break dealing large number items, number categories (.e. response patterns) grows exponentially, leading sparsity issues. particular, conducting goodness--fit tests binary factor models, low cell counts ensuing contingency table can result unstable unreliable test statistics1, leading inaccurate assessments model fit. illustrate problem sparsity plot observed vs expected response pattern probabilities, highlighting limitations traditional tests. following plots hypothetical situation \\(p=10\\) binary items (sample size \\(n=1000\\)) generated two-factor model analysed using factor model lavaan. Full information Limited information","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/intro.html","id":"limited-information-tests","dir":"Articles","previous_headings":"","what":"Limited information tests","title":"Introduction","text":"address issue, propose solution based limited information tests. Limited information goodness--fit (LIGOF) tests named utilize subset information data assess goodness--fit model. project, focus lower-order marginals univariate bivariate marginal positive probabilities, rather full contingency table observed response patterns. subset information, limited information, used assess well model fits observed data. term “limited information” reflects fact LIGOF tests rely full contingency table, can become computationally challenging statistically problematic dealing large numbers categories sparse data. using subset information data less sensitive low cell counts, LIGOF tests provide computationally efficient statistically robust approach assessing goodness--fit binary factor model.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/intro.html","id":"composite-likelihood-estimation","dir":"Articles","previous_headings":"","what":"Composite likelihood estimation","title":"Introduction","text":"\\(p\\) large, possibly ML methods also struggle computationally. explore LIGOF tests composite likelihood estimation, provides computational advantage. Furthermore, LIGOF tests can built organically quantities used PL estimation framework. derive theory LIGOF tests, includes derivation form test statistics well distributions.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/intro.html","id":"complex-sampling","dir":"Articles","previous_headings":"","what":"Complex sampling","title":"Introduction","text":"also extend results independent sampling complex sampling designs, estimates test statistics weight-adjusted. Weights easily incorporated pairwise log-likelihood function, optimised obtain weight-adjusted parameter values. involved covariance matrix also needed weight-adjusted ensure correct distributional behaviour test statistics.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/intro.html","id":"simulation-study","dir":"Articles","previous_headings":"","what":"Simulation study","title":"Introduction","text":"conducted simulation study test performance various LIGOF tests simple random complex sampling scheme.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/articles/mle.html","id":"comparison-of-estimates","dir":"Articles","previous_headings":"","what":"Comparison of estimates","title":"Comparing ML and PL estimators","text":"Model 1 Model 2 Model 3 Model 4 Model 5","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/proofs.html","id":"maximum-likelihood","dir":"Articles","previous_headings":"","what":"Maximum likelihood","title":"Proofs","text":"Proposition 1  multivariate Bernoulli model response pattern representation log-likelihood given \\[\\begin{equation} \\ell({\\boldsymbol\\theta}) = \\sum_{r=1}^{R} \\hat n_r \\log \\pi_{r}({\\boldsymbol\\theta}), \\end{equation}\\] expected (unit) Fisher information matrix \\(m\\)-dimensional real parameter vector \\({\\boldsymbol\\theta}\\) \\({\\mathcal }= {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1} {\\boldsymbol\\Delta}\\\\mathbb{R}^{m\\times m}\\), \\({\\boldsymbol\\Delta}_{r,k} = \\frac{\\partial\\pi_r({\\boldsymbol\\theta})}{\\partial\\theta_k}\\), \\(r=1,\\dots,R\\), \\(k=1,\\dots,m\\); \\({\\mathbf D}= \\mathop{\\mathrm{diag}}(\\pi_1({\\boldsymbol\\theta}),\\dots,\\pi_R({\\boldsymbol\\theta}))\\). Proof. \\(k=1,\\dots,m\\), partial derivative log-likelihood \\(\\ell({\\boldsymbol\\theta})\\) respect \\(\\theta_k\\) \\[\\begin{equation} \\frac{\\partial\\ell({\\boldsymbol\\theta})}{\\partial\\theta_k} = \\sum_{r=1}^{R} \\hat n_r \\frac{\\partial\\log \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} = \\sum_{r=1}^{R}  \\frac{\\hat n_r}{\\pi_{r}({\\boldsymbol\\theta})} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k}. \\tag{1} \\end{equation}\\]      Differentiating respect \\(\\theta_l\\) time, \\(l\\\\{1,\\dots,m\\}\\), get \\[\\begin{equation}\\label{eq:der_score} \\frac{\\partial\\ell({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} = \\sum_{r=1}^{R}  \\frac{\\hat n_r}{\\pi_{r}({\\boldsymbol\\theta})} \\frac{\\partial^2 \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} - \\sum_{r=1}^{R}  \\frac{\\hat n_r}{\\pi_{r}({\\boldsymbol\\theta})^2} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_l}. \\end{equation}\\] Taking negative expectations quantity yields \\((k,l)\\)th element full Fisher information matrix: \\[\\begin{align}\\label{eq:negexpscore} -\\mathop{\\mathrm{E}}\\left[\\frac{\\partial\\ell({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l}  \\right] &= \\sum_{r=1}^{R}  \\frac{\\mathop{\\mathrm{E}}(\\hat n_r)}{\\pi_{r}({\\boldsymbol\\theta})^2} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_l}  - \\sum_{r=1}^{R}  \\frac{\\mathop{\\mathrm{E}}(\\hat n_r)}{\\pi_{r}({\\boldsymbol\\theta})} \\frac{\\partial^2 \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l}  \\nonumber  \\\\ &=  n\\sum_{r=1}^{R}  \\frac{\\cancel{\\pi_{r}({\\boldsymbol\\theta})}}{\\pi_{r}({\\boldsymbol\\theta})^{\\cancel{2}}} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_l} -  n\\sum_{r=1}^{R}  \\frac{\\cancel{\\pi_{r}({\\boldsymbol\\theta})}}{\\cancel{\\pi_{r}({\\boldsymbol\\theta})}} \\frac{\\partial^2 \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} \\nonumber \\\\ &= n\\sum_{r=1}^{R}  \\frac{1}{\\pi_{r}({\\boldsymbol\\theta})} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_l} -    \\cancel{ n\\sum_{r=1}^{R} \\frac{\\partial^2 \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} } , \\end{align}\\] cancellation second term last line follows fact \\(k=1,\\dots,m\\), \\[\\begin{equation} \\sum_{r=1}^R \\pi_{r}({\\boldsymbol\\theta}) = 1 \\ \\ \\Rightarrow \\ \\  \\sum_{r=1}^R \\frac{\\partial \\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k}  = 0.  \\tag{2} \\end{equation}\\] Dividing \\(n\\) gives desired result. Proposition 2  maximum likelihood estimators class best asymptotically normal (BAN) estimators \\(\\hat{\\boldsymbol\\theta}\\) \\({\\boldsymbol\\theta}\\) satisfy \\[\\begin{equation} \\sqrt n (\\hat{\\boldsymbol\\theta}- {\\boldsymbol\\theta}) = \\sqrt n \\, {\\mathbf B}\\big({\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\big) + o(1), \\tag{3} \\end{equation}\\] \\({\\mathbf B}= {\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1}\\) \\(m\\times R\\) matrix. Proof. Let \\(\\hat{\\boldsymbol\\theta}\\) MLE \\({\\boldsymbol\\theta}\\). , maximum likelihood theory tells us \\(n\\\\infty\\), \\[\\begin{equation}\\label{eq:limitdisttheta} \\sqrt n (\\hat{\\boldsymbol\\theta}- {\\boldsymbol\\theta}) \\xrightarrow{\\text D} \\mathop{\\mathrm{N}}({\\mathbf 0}, {\\mathcal }^{-1}). \\end{equation}\\] Consider now first order Taylor expansion score vector \\(\\nabla\\ell({\\boldsymbol\\theta})\\) (entries given (1) ) parameter value \\({\\boldsymbol\\theta}_0\\): \\[\\begin{align} \\nabla \\ell ({\\boldsymbol\\theta}) &= \\nabla \\ell({\\boldsymbol\\theta}_0) + \\textcolor{gray}{\\frac{n}{n}} \\nabla^2\\ell({\\boldsymbol\\theta}_0) ({\\boldsymbol\\theta}- {\\boldsymbol\\theta}_0 ) + o(n^{-1/2})  \\\\ &\\xrightarrow{\\text P} \\nabla \\ell({\\boldsymbol\\theta}_0) - n{\\mathcal }({\\boldsymbol\\theta}- {\\boldsymbol\\theta}_0)   \\ \\text{$n\\\\infty$}. \\end{align}\\] implies \\[\\begin{align} \\cancelto{0}{\\nabla \\ell (\\hat{\\boldsymbol\\theta})} &\\approx \\nabla \\ell({\\boldsymbol\\theta}) + n{\\mathcal }({\\boldsymbol\\theta}- \\hat{\\boldsymbol\\theta})  \\\\ \\Rightarrow (\\hat{\\boldsymbol\\theta}-{\\boldsymbol\\theta}) &= \\frac{1}{n} {\\mathcal }^{-1} \\nabla\\ell({\\boldsymbol\\theta}) \\nonumber \\\\ \\Rightarrow \\sqrt n (\\hat{\\boldsymbol\\theta}-{\\boldsymbol\\theta}) &= \\frac{\\sqrt n}{n} {\\mathcal }^{-1} \\nabla\\ell({\\boldsymbol\\theta}) \\tag{4} \\end{align}\\] wish express score vector \\(\\nabla\\ell({\\boldsymbol\\theta})\\) terms errors \\({\\mathbf e}:= {\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\). Notice \\[\\begin{align*} n \\sum_{r=1}^{R} \\big(p_r - \\pi_{r}({\\boldsymbol\\theta})\\big) \\frac{1}{\\pi_{r}({\\boldsymbol\\theta})}\\frac{\\partial\\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} &= \\sum_{r=1}^{R}  \\frac{\\overbrace{n p_r}^{\\hat n_r}}{\\pi_{r}({\\boldsymbol\\theta})}\\frac{\\partial\\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} - n \\sum_{r=1}^{R}  \\frac{\\pi_{r}({\\boldsymbol\\theta})}{\\pi_{r}({\\boldsymbol\\theta})}\\frac{\\partial\\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\\\ &= \\frac{\\partial\\ell(\\theta)}{\\partial\\theta_k} - \\cancel{ n \\sum_{r=1}^{R}  \\frac{\\partial\\pi_{r}({\\boldsymbol\\theta})}{\\partial\\theta_k}}, \\end{align*}\\] cancellation due (2). can now see write score vector terms residuals: \\[\\begin{equation} \\nabla\\ell({\\boldsymbol\\theta}) = n {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1} \\big({\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\big). \\tag{5} \\end{equation}\\] Substituting (5) (4) gives us \\[\\begin{align} \\sqrt n (\\hat{\\boldsymbol\\theta}-{\\boldsymbol\\theta}) &\\approx \\sqrt n \\ {\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1} \\ \\big({\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\big) \\tag{6}. \\end{align}\\] Proposition 3  covariance matrix residuals, \\({\\boldsymbol\\Omega}= ({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B}){\\boldsymbol\\Sigma}({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B})^\\top\\) simplifies \\({\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1}{\\boldsymbol\\Delta}^\\top\\). Proof. \\[\\begin{align} {\\boldsymbol\\Omega} &= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}- {\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top + {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top \\nonumber \\\\ &= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1} ({\\mathbf D}- {\\boldsymbol\\pi}({\\boldsymbol\\theta}){\\boldsymbol\\pi}({\\boldsymbol\\theta})^\\top) - {\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top + {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top \\nonumber \\\\ &= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top  - \\cancel{{\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top{\\mathbf D}^{-1} {\\boldsymbol\\pi}({\\boldsymbol\\theta}){\\boldsymbol\\pi}({\\boldsymbol\\theta})^\\top} - {\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top + {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top \\nonumber \\\\ &= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top - {\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top +  {\\boldsymbol\\Delta}{\\mathcal }^{-1} \\overbrace{ {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1}{\\boldsymbol\\Delta}}^{{\\mathcal }} {\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top \\nonumber \\\\ &=  {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top. \\end{align}\\] cancellation occurs \\[ {\\boldsymbol\\Delta}^\\top{\\mathbf D}^{-1} {\\boldsymbol\\pi}({\\boldsymbol\\theta}) = {\\boldsymbol\\Delta}^\\top {\\mathbf 1}= {\\mathbf 0}. \\]","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/proofs.html","id":"pairwise-likelihood","dir":"Articles","previous_headings":"","what":"Pairwise likelihood","title":"Proofs","text":"Proposition 4  pairwise likelihood estimator \\(\\hat{\\boldsymbol\\theta}_{\\text{PL}}\\) satisfies BAN requirement (eq:ban) \\({\\mathbf B}\\) matrix given \\({\\mathbf B}= {\\mathcal H}^{-1}\\tilde{\\boldsymbol\\Delta}^{-1}\\tilde {\\mathbf D}^{-1} {\\mathbf G}\\), \\(\\tilde{\\boldsymbol\\Delta}\\\\mathbb{R}^{\\tilde R \\times m}\\) consists partial derivatives pairwise probabilities, .e. \\(\\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k}\\); \\(\\tilde{\\mathbf D}= \\mathop{\\mathrm{diag}}((\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta}))_{<j})\\); \\({\\mathbf G}\\) indicator matrix transform quantities \\(\\tilde R\\) dimensions \\(R\\) dimensions. Proof. steps show maximum likelihood case, except now using pairwise quantities (unit) sensitivity matrix \\({\\mathcal H}=-n^{-1}\\mathop{\\mathrm{E}}\\nabla^2\\operatorname{\\ell_P}({\\boldsymbol\\theta})\\). Thus, may arrive following line \\[\\begin{equation} \\nabla\\operatorname{\\ell_P}({\\boldsymbol\\theta}) = n \\tilde{\\boldsymbol\\Delta}^\\top \\tilde{\\mathbf D}^{-1} \\big( {\\color{gray}\\overbrace{\\color{black} \\tilde  {\\mathbf p}- \\tilde {\\boldsymbol\\pi}({\\boldsymbol\\theta}) }^{\\tilde{\\mathbf e}}}\\big). \\tag{7} \\end{equation}\\] following ML steps arrive (eq:scoreaserrors). tilde indicates dealing \\(\\tilde R\\) pairwise quantities, negative positive outcomes alike. need indicator matrix \\({\\mathbf G}\\) appropriate size transform pairwise errors \\(\\tilde{\\mathbf e}\\\\mathbb{R}^{\\tilde R}\\) appearing right-hand side (7) joint-model errors \\({\\mathbf e}\\\\mathbb{R}^R\\). words, \\({\\mathbf G}\\) consist stacked submatrices \\({\\mathbf G}_{y_iy_j}^{(ij)}\\) satisfy \\[ {\\mathbf G}_{y_iy_j}^{(ij)} \\big({\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\big) = \\begin{pmatrix} p_{00}^{(ij)} - \\pi({\\boldsymbol\\theta})_{00}^{(ij)}\\\\ p_{10}^{(ij)} - \\pi({\\boldsymbol\\theta})_{10}^{(ij)}\\\\ p_{01}^{(ij)} - \\pi({\\boldsymbol\\theta})_{01}^{(ij)}\\\\ p_{11}^{(ij)} - \\pi({\\boldsymbol\\theta})_{11}^{(ij)}\\\\ \\end{pmatrix} \\] pairs \\(,j=1,\\dots,p\\), \\(<j\\), added condition sum 4 entries equal 0 (proportions probabilities must sum 1). matrix \\({\\mathbf G}\\) difficult find, derivation can bit tedious, omitted brevity (however, example given next). Finally, \\[\\begin{equation} \\sqrt n (\\hat{\\boldsymbol\\theta}_{\\text{PL}}- {\\boldsymbol\\theta}) \\approx \\sqrt n \\ {\\color{gray}\\overbrace{\\color{black}{\\mathcal H}^{-1}  \\tilde{\\boldsymbol\\Delta}^\\top \\tilde{\\mathbf D}^{-1}{\\mathbf G}}^{{\\mathbf B}}} \\big (  {\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta}) \\big). \\tag{8} \\end{equation}\\] Example 1  Consider \\(p=3\\). \\(\\tilde R = 4 \\times {3 \\choose 2 } = 12\\) (total number pairwise probabilities). pairwise outcomes can tabulated . interested obtaining final column joint errors \\({\\mathbf e}= ({\\mathbf p}- {\\boldsymbol\\pi})\\). cases ‘10’, ‘01’ ‘11’, straightforward. Example: \\(B_{10}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) = (00110000)({\\mathbf p}- {\\boldsymbol\\pi})\\) \\(B_{01}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) = (00001100)({\\mathbf p}- {\\boldsymbol\\pi})\\) \\(B_{11}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) = (11000000)({\\mathbf p}- {\\boldsymbol\\pi})\\). remaining case ‘00’, notice \\[\\begin{align*} \\tilde e_{00}^{(12)} &= p_{00}^{(12)} - \\pi_{00}^{(12)} \\\\ &=  (1 - p_{10}^{(12)} - p_{01}^{(12)} - p_{11}^{(12)}) - (1 - \\pi_{10}^{(12)} - \\pi_{01}^{(12)} - \\pi_{11}^{(12)}) \\\\ &= - B_{10}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) - B_{01}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) - B_{11}^{(12)} ({\\mathbf p}- {\\boldsymbol\\pi}) \\\\ &= - ({\\color{gray}\\underbrace{\\color{black}B_{10}^{(12)} + B_{01}^{(12)} + B_{11}^{(12)}}_{B_{00}^{(12)}}} )  ({\\mathbf p}- {\\boldsymbol\\pi}) \\end{align*}\\] Following pattern , getting following design matrix: implemented R function create_G_mat(): couple notes: manuscript, describe matrix \\(B\\) design matrix transforms pairwise residuals \\(\\tilde{\\mathbf e}\\) unviariate bivariate residuals \\({\\mathbf e}_2\\). relationship \\({\\mathbf G}\\), \\({\\mathbf T}_2\\) \\(B\\) \\({\\mathbf G}= B {\\mathbf T}_2\\). Thus, \\(B\\) matrix may obtained postmultiplying \\({\\mathbf G}\\) right inverse \\({\\mathbf T}_2\\). right inverse exists \\({\\mathbf T}_2\\) full row rank. Proposition 5  unit sensitivity matrix \\({\\mathcal H}\\) pairwise likelihood estimation method \\({\\mathcal H}= \\tilde{\\boldsymbol\\Delta}^\\top \\tilde{\\mathbf D}^{-1} \\tilde{\\boldsymbol\\Delta}\\). Proof. maximum pairwise likelihood estimator \\(\\hat{\\boldsymbol\\theta}_{\\text{PL}}\\) solves estimating equations \\(\\mathbb{R}^q \\ni \\nabla \\operatorname{\\ell_P}({\\boldsymbol\\theta}) = {\\mathbf 0}\\). score vector entries \\[\\begin{equation} \\frac{\\partial\\!\\operatorname{\\ell_P}({\\boldsymbol\\theta})}{\\partial\\theta_k} = \\sum_{<j} \\sum_{y_i}\\sum_{y_j}  \\frac{\\hat n_{y_iy_j}^{(ij)} }{\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})} \\frac{\\partial \\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\tag{9} \\end{equation}\\] \\(k=1,\\dots,q\\). Differentiating respect \\(\\theta_l\\) can derived \\[\\begin{equation} \\frac{\\partial\\!\\operatorname{\\ell_P}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} = \\sum_{<j} \\sum_{y_i} \\sum_{y_j} \\left\\{ \\frac{\\hat n_{y_iy_j}^{(ij)}}{\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})} \\frac{\\partial^2\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} - \\frac{\\hat n_{y_iy_j}^{(ij)}}{\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})^2} \\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_l}\\right\\} . \\tag{10} \\end{equation}\\] \\((k,l)\\)th entry (full) sensitivity matrix expected value (10), shown \\[\\begin{equation}\\label{eq:sensitivitymatrix} -\\mathop{\\mathrm{E}}\\left[ \\frac{\\partial\\!\\operatorname{\\ell_P}({\\boldsymbol\\theta})}{\\partial\\theta_k\\partial\\theta_l} \\right] = n \\sum_{<j} \\sum_{y_i} \\sum_{y_j} \\frac{1}{\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})} \\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_l}, \\end{equation}\\] matrix form \\(n\\tilde{\\boldsymbol\\Delta}^\\top \\tilde{\\mathbf D}^{-1} \\tilde{\\boldsymbol\\Delta}\\). Dividing \\(n\\) gives desired result. Proposition 6  covariance matrix residuals, \\({\\boldsymbol\\Omega}= ({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B}){\\boldsymbol\\Sigma}({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B})^\\top\\) simplifies \\({\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal H}^{-1}{\\boldsymbol\\Delta}^\\top\\) pairwise likelihood framework. Proof. Consider first matrix \\({\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}\\): \\[\\begin{align*} {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma} &= {\\boldsymbol\\Delta}{\\mathcal H}^{-1}\\tilde{\\boldsymbol\\Delta}^{-1}\\tilde {\\mathbf D}^{-1} {\\mathbf G}{\\boldsymbol\\Sigma}\\\\ &= {\\boldsymbol\\Delta}{\\mathcal H}^{-1}\\tilde{\\boldsymbol\\Delta}^{-1}\\tilde {\\mathbf D}^{-1} {\\mathbf G}({\\mathbf D}- \\pi_{}({\\boldsymbol\\theta})\\pi_{}({\\boldsymbol\\theta})^\\top) \\\\ &= \\vdots \\end{align*}\\] Actually, might work…","code":"create_G_mat(p = 3) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   -1   -1   -1   -1   -1   -1    0    0 #>  [2,]    0    0    1    1    0    0    0    0 #>  [3,]    0    0    0    0    1    1    0    0 #>  [4,]    1    1    0    0    0    0    0    0 #>  [5,]   -1   -1   -1   -1   -1    0   -1    0 #>  [6,]    0    1    0    1    0    0    0    0 #>  [7,]    0    0    0    0    1    0    1    0 #>  [8,]    1    0    1    0    0    0    0    0 #>  [9,]   -1   -1   -1    0   -1   -1   -1    0 #> [10,]    0    1    0    0    0    1    0    0 #> [11,]    0    0    1    0    0    0    1    0 #> [12,]    1    0    0    0    1    0    0    0 #> attr(,\"pairwise\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 require(testthat) #> Loading required package: testthat B  <- lavaan.bingof:::Beta_mat_design(3) G  <- lavaan.bingof::create_G_mat(3) T2 <- lavaan.bingof::create_T2_mat(3)  # equal G #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   -1   -1   -1   -1   -1   -1    0    0 #>  [2,]    0    0    1    1    0    0    0    0 #>  [3,]    0    0    0    0    1    1    0    0 #>  [4,]    1    1    0    0    0    0    0    0 #>  [5,]   -1   -1   -1   -1   -1    0   -1    0 #>  [6,]    0    1    0    1    0    0    0    0 #>  [7,]    0    0    0    0    1    0    1    0 #>  [8,]    1    0    1    0    0    0    0    0 #>  [9,]   -1   -1   -1    0   -1   -1   -1    0 #> [10,]    0    1    0    0    0    1    0    0 #> [11,]    0    0    1    0    0    0    1    0 #> [12,]    1    0    0    0    1    0    0    0 #> attr(,\"pairwise\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 B %*% T2 #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   -1   -1   -1   -1   -1   -1    0    0 #>  [2,]    0    0    1    1    0    0    0    0 #>  [3,]    0    0    0    0    1    1    0    0 #>  [4,]    1    1    0    0    0    0    0    0 #>  [5,]   -1   -1   -1   -1   -1    0   -1    0 #>  [6,]    0    1    0    1    0    0    0    0 #>  [7,]    0    0    0    0    1    0    1    0 #>  [8,]    1    0    1    0    0    0    0    0 #>  [9,]   -1   -1   -1    0   -1   -1   -1    0 #> [10,]    0    1    0    0    0    1    0    0 #> [11,]    0    0    1    0    0    0    1    0 #> [12,]    1    0    0    0    1    0    0    0 test_that(\"G and BT2 are equal\", {   expect_equal(G, B %*% T2, ignore_attr = TRUE)   }) #> Test passed   # equal B #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]   -1   -1    0    1    0    0 #>  [2,]    1    0    0   -1    0    0 #>  [3,]    0    1    0   -1    0    0 #>  [4,]    0    0    0    1    0    0 #>  [5,]   -1    0   -1    0    1    0 #>  [6,]    1    0    0    0   -1    0 #>  [7,]    0    0    1    0   -1    0 #>  [8,]    0    0    0    0    1    0 #>  [9,]    0   -1   -1    0    0    1 #> [10,]    0    1    0    0    0   -1 #> [11,]    0    0    1    0    0   -1 #> [12,]    0    0    0    0    0    1 (altB <- round(G %*% MASS::ginv(T2), 0)) #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]   -1   -1    0    1    0    0 #>  [2,]    1    0    0   -1    0    0 #>  [3,]    0    1    0   -1    0    0 #>  [4,]    0    0    0    1    0    0 #>  [5,]   -1    0   -1    0    1    0 #>  [6,]    1    0    0    0   -1    0 #>  [7,]    0    0    1    0   -1    0 #>  [8,]    0    0    0    0    1    0 #>  [9,]    0   -1   -1    0    0    1 #> [10,]    0    1    0    0    0   -1 #> [11,]    0    0    1    0    0   -1 #> [12,]    0    0    0    0    0    1 test_that(\"B can be created from T2 inv\", {   expect_equal(B, altB, ignore_attr = TRUE) }) #> Test passed fit <- lavaan.bingof:::fit_facmod_pml(1, \"srs\", 1000)$fit res <- lavaan.bingof:::calc_test_stuff(fit) attach(res) mat1 <- Omega2 mat2 <- Sigma2 - Delta2 %*% H_inv %*% t(Delta2) detach(res) plot(mat1, mat2)"},{"path":"https://haziqj.ml/lavaan.bingof/articles/sigma.html","id":"estimating-the-proportions","dir":"Articles","previous_headings":"","what":"Estimating the proportions","title":"Estimating the multinomial covariance matrix","text":"weighted sample proportion estimator \\[ \\hat{\\mathbf p}_2 = \\frac{\\sum_i w_i {\\mathbf y}_i}{\\sum_i w_i} \\] corresponds weighted column average matrix \\({\\mathbf y}\\).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sigma.html","id":"estimating-the-covariance-matrix","dir":"Articles","previous_headings":"","what":"Estimating the covariance matrix","title":"Estimating the multinomial covariance matrix","text":"estimator covariance matrix \\[ \\hat{\\boldsymbol\\Sigma}_2 = \\frac{1}{\\sum_i w_i} \\sum_i \\frac{N}{N-1} w_i ({\\mathbf y}_i - \\hat{\\mathbf p}_2)^\\top ({\\mathbf y}_i - \\hat{\\mathbf p}_2). \\] means entry \\(S \\times S\\) covariance matrix simply weighted estimate variance covariance binary response variables. model (e.g. binary factor model), replace \\(\\hat {\\mathbf p}_2\\) estimated model probabilities \\(\\hat{\\boldsymbol\\pi}_2 := {\\boldsymbol\\pi}_2(\\hat{\\boldsymbol\\theta})\\) instead.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sim_results.html","id":"path-diagrams","dir":"Articles","previous_headings":"","what":"Path diagrams","title":"Description and results","text":"Model 1 Model 2 Model 3 Model 4 Model 5","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sim_results.html","id":"srs-type-i-errors","dir":"Articles","previous_headings":"","what":"SRS type I errors","title":"Description and results","text":"10% significance 5% significance 1% significance","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sim_results.html","id":"srs-power-plots","dir":"Articles","previous_headings":"","what":"SRS power plots","title":"Description and results","text":"10% significance 5% significance 1% significance","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sim_results.html","id":"complex-sampling-type-i-errors","dir":"Articles","previous_headings":"","what":"Complex sampling type I errors","title":"Description and results","text":"10% significance 5% significance 1% significance","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/sim_results.html","id":"complex-sampling-power-plots","dir":"Articles","previous_headings":"","what":"Complex sampling power plots","title":"Description and results","text":"10% significance 5% significance 1% significance","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"model-based-probabilities","dir":"Articles","previous_headings":"","what":"Model-based probabilities","title":"Technical details","text":"model interest factor model, commonly used social statistics. Using underlying variable (UV) approach, observed binary responses \\(y_i\\) manifestations latent, continuous variables \\(Y_i^*\\), \\(=1,\\dots,p\\). connection made follows: \\[ Y_i = \\begin{cases} 1 & Y_i^* > \\tau_i \\\\ 0 & Y_i^* \\leq \\tau_i, \\end{cases} \\] \\(\\tau_i\\) threshold associated variable \\(Y_i^*\\). convenience, \\(Y_i^*\\) taken standard normal random variables1. factor model takes form \\[ \\mathbf Y^* = \\mathbf \\Lambda\\boldsymbol \\eta + \\boldsymbol \\epsilon, \\] component explained : \\(\\mathbf Y^* = (Y_1^*,\\dots,Y_p^*)^\\top \\\\mathbf R^p\\) underlying variables; \\(\\boldsymbol\\Lambda \\\\mathbf R^{p \\times q}\\) matrix loadings; \\(\\boldsymbol \\eta = (\\eta_1,\\dots,\\eta_q)^\\top \\\\mathbf R^q\\) vector latent factors; \\(\\boldsymbol \\epsilon \\\\mathbf R^p\\) error terms associated items (aka unique variables). also make distributional assumptions, namely \\(\\boldsymbol\\eta \\sim \\operatorname{N}_q(\\mathbf 0, \\boldsymbol\\Psi)\\), \\({\\boldsymbol\\Psi}\\) correlation matrix, .e. \\(k,l\\\\{1,\\dots,q\\}\\), \\[ {\\boldsymbol\\Psi}_{kl} = \\begin{cases} 1 & \\text{}  k = l \\\\ \\rho(\\eta_k, \\eta_l) & \\text{} k \\neq l. \\end{cases} \\] \\(\\boldsymbol \\epsilon \\sim \\operatorname{N}_p(\\mathbf 0, \\boldsymbol\\Theta_\\epsilon)\\), \\(\\boldsymbol\\Theta_\\epsilon = \\mathbf - \\operatorname{diag}(\\boldsymbol\\Lambda \\boldsymbol\\Psi \\boldsymbol\\Lambda^\\top)\\). two assumptions, together \\(\\operatorname{Cov}(\\boldsymbol\\eta, \\boldsymbol\\epsilon) = 0\\), implies \\(\\mathbf Y^*\\sim\\operatorname{N}_p(\\mathbf 0,{\\boldsymbol\\Sigma}_{{\\mathbf y}^*})\\), \\[\\begin{align} {\\boldsymbol\\Sigma}_{{\\mathbf y}^*} = \\operatorname{Var}(\\mathbf Y^*) &= \\boldsymbol\\Lambda\\boldsymbol\\Phi\\boldsymbol\\Lambda^\\top + \\boldsymbol\\Theta_\\epsilon \\\\ &= \\mathbf + (\\boldsymbol\\Lambda\\boldsymbol\\Phi\\boldsymbol\\Lambda^\\top - \\operatorname{diag}\\big(\\boldsymbol\\Lambda \\boldsymbol\\Phi \\boldsymbol\\Lambda^\\top)\\big). \\end{align}\\]     parameter vector factor model denoted \\(\\boldsymbol\\theta^\\top = (\\boldsymbol\\lambda, \\boldsymbol\\psi, \\boldsymbol\\tau) \\\\mathbb{R}^m\\), contains vectors free non-redundant parameters \\(\\boldsymbol\\Lambda\\) \\(\\boldsymbol \\Psi\\) respectively, well vector free thresholds. factor model, probability response pattern \\(\\mathbf y_r\\) \\[\\begin{align} \\pi_{r}({\\boldsymbol\\theta}) &= \\Pr(\\mathbf Y = \\mathbf y_r \\mid \\boldsymbol\\theta) \\\\ &= \\idotsint_A \\phi_p(\\mathbf y^* \\mid \\mathbf 0, \\boldsymbol\\Sigma_{\\mathbf y^*} ) \\, \\text{d}\\mathbf y^* \\end{align}\\] \\(\\phi_p(\\cdot \\mid \\boldsymbol\\mu,\\boldsymbol\\Sigma)\\) density function \\(p\\)-dimensional normal distribution mean \\(\\boldsymbol\\mu\\) variance \\(\\boldsymbol\\Sigma\\). integral evaluated set \\[ = \\{ \\mathbf Y^* \\\\mathbb R^p \\mid Y_1=y_1,\\dots,Y_p=y_p \\}. \\]","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"parameter-estimation","dir":"Articles","previous_headings":"","what":"Parameter estimation","title":"Technical details","text":"Suppose \\(h=1,\\dots,n\\) observations \\({\\mathbf Y}={\\mathbf y}^{(h)}\\) obtained. purpose generalising independent samples complex samples, suppose unit \\(h\\) sample assigned (normalised) survey weight \\(w_h\\) \\(\\sum_h w_h = n\\). course, independent simple random sampling scheme implemented, \\(w_h=1\\). sample proportions category \\(r\\) written \\(p_r = \\hat n_r/n\\),  \\[\\begin{equation} \\hat n_r = \\sum_h w_h [{\\mathbf y}^{(h)} = {\\mathbf y}_r], \\end{equation}\\] \\([\\cdot]\\) denotes Iverson bracket. words, \\(\\hat n_r\\) represents (weighted) frequency counts observed response patterns \\(\\sum_{r=1}^R \\hat n_r = n\\). vector \\(\\hat{\\mathbf n}= (\\hat n_1, \\dots, \\hat n_R)^\\top\\) defines multivariate binomial distribution, commonly called multinomial distribution parameters \\(n\\), \\(R\\), \\({\\boldsymbol\\pi}({\\boldsymbol\\theta})\\). probability mass function \\(\\hat{\\mathbf n}\\) given \\[\\begin{equation} f_{\\hat{\\mathbf n}}(x_1,\\dots,x_R) = n! \\prod_{r=1}^R \\frac{1}{x_r!} \\big[\\pi_{r}({\\boldsymbol\\theta})\\big]^{x_r}, \\end{equation}\\] log-likelihood \\({\\boldsymbol\\theta}\\) given observed frequencies \\(\\hat{\\mathbf n}\\) (ignoring constants) \\[\\begin{equation} \\ell({\\boldsymbol\\theta}) = \\log f_{\\hat{\\mathbf n}}(\\hat n_1,\\dots,\\hat n_R) = \\sum_{r=1}^{R} \\hat n_r \\log \\pi_{r}({\\boldsymbol\\theta}). \\end{equation}\\] maximum likelihood estimator \\(\\hat{\\boldsymbol\\theta}_{\\text{ML}}\\) satisfies \\(\\hat{\\boldsymbol\\theta}_{\\text{ML}}= \\mathop{\\mathrm{argmax}}_{{\\boldsymbol\\theta}} \\ell({\\boldsymbol\\theta})\\). Maximum likelihood theory tells us , certain regularity conditions, \\(n\\\\infty\\), \\[\\begin{equation}\\label{eq:limitdisttheta} \\sqrt n (\\hat{\\boldsymbol\\theta}- {\\boldsymbol\\theta}) \\xrightarrow{\\text D} {\\mathop{\\mathrm{N}}}_m\\big({\\mathbf 0}, {\\mathcal }({\\boldsymbol\\theta})^{-1}\\big), \\end{equation}\\] \\(\\mathbb{R}^{m\\times m} \\ni {\\mathcal }= -n^{-1}\\mathop{\\mathrm{E}}\\nabla^2 \\ell({\\boldsymbol\\theta})\\) (unit) expected Fisher information matrix. can shown \\({\\mathcal }= {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1} {\\boldsymbol\\Delta}\\), \\({\\boldsymbol\\Delta}_{r,k} = \\frac{\\partial\\pi_r({\\boldsymbol\\theta})}{\\partial\\theta_k}\\), \\(r=1,\\dots,R\\), \\(k=1,\\dots,m\\); \\({\\mathbf D}= \\mathop{\\mathrm{diag}}({\\boldsymbol\\pi}({\\boldsymbol\\theta}))\\). maximum likelihood estimators class best asymptotically normal (BAN) estimators \\(\\hat{\\boldsymbol\\theta}\\) \\({\\boldsymbol\\theta}\\) satisfy \\[\\begin{equation} \\sqrt n (\\hat{\\boldsymbol\\theta}- {\\boldsymbol\\theta}) = \\sqrt n \\, {\\mathbf B}\\big({\\mathbf p}- {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\big) + o(1) \\tag{3} \\end{equation}\\] \\(m\\times R\\) matrix \\({\\mathbf B}\\). specific case maximum likelihood estimation, can derive \\({\\mathbf B}\\) \\({\\mathbf B}= {\\mathcal }^{-1} {\\boldsymbol\\Delta}^\\top {\\mathbf D}^{-1}\\). proven corresponding article (see XXX details).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"pairwise-likelihood-estimation","dir":"Articles","previous_headings":"Parameter estimation","what":"Pairwise likelihood estimation","title":"Technical details","text":"main interest project construct test statistics using composite likelihood methods, specifically pairwise likelihood method. order define pairwise likelihood, let \\(\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})\\) probability model \\(Y_i=y_i \\\\{0,1\\}\\) \\(Y_j=y_j\\\\{0,1\\}\\) pair variables \\(Y_i\\) \\(Y_j\\), \\(,j=1,\\dots,p\\) \\(<j\\).     pairwise log-likelihood takes form \\[\\begin{equation} \\operatorname{\\ell_P}({\\boldsymbol\\theta}) = \\sum_{<j} \\sum_{y_i}\\sum_{y_j} \\hat n_{y_iy_j}^{(ij)} \\log \\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta}), \\end{equation}\\] \\(\\hat n_{y_iy_j}^{(ij)}\\) observed (weighted) frequency sample units \\(Y_i=y_i\\) \\(Y_j=y_j\\), \\[ \\hat n_{y_iy_j}^{(ij)} = \\sum_h w_h [{\\mathbf y}^{(h)}_i = y_i, {\\mathbf y}^{(h)}_j = y_j]. \\] Let us also define corresponding observed pairwise proportions \\(p_{y_iy_j}^{(ij)} = \\hat n_{y_iy_j}^{(ij)}/n\\). total \\(\\tilde R = 4 \\times {p \\choose 2}\\) summands, ‘4’ representative total number pairwise combinations binary choices ‘00’, ‘10’, ‘01’, ‘11’. pairwise maximum likelihood estimator \\(\\hat{\\boldsymbol\\theta}_{\\text{PL}}\\) satisfies \\(\\hat{\\boldsymbol\\theta}_{\\text{PL}}= \\mathop{\\mathrm{argmax}}_{{\\boldsymbol\\theta}} \\operatorname{\\ell_P}({\\boldsymbol\\theta})\\). certain regularity conditions, \\[\\begin{equation} \\sqrt N (\\hat{\\boldsymbol\\theta}_{\\text{PL}}- {\\boldsymbol\\theta}) \\xrightarrow{D} {\\mathop{\\mathrm{N}}}_m\\big({\\mathbf 0}, {\\mathcal H}({\\boldsymbol\\theta}){\\mathcal J}({\\boldsymbol\\theta})^{-1}{\\mathcal H}({\\boldsymbol\\theta})\\big), \\end{equation}\\] \\({\\mathcal H}({\\boldsymbol\\theta})=-\\mathop{\\mathrm{E}}\\nabla^2\\operatorname{\\ell_P}({\\boldsymbol\\theta})\\) sensitivity matrix; \\({\\mathcal J}({\\boldsymbol\\theta})=\\mathop{\\mathrm{Var}}\\big(\\sqrt N \\nabla\\operatorname{\\ell_P}({\\boldsymbol\\theta})\\big)\\) variability matrix. can also show pairwise maximum likelihood estimator satisfies (3), matrix \\({\\mathbf B}\\) case \\({\\mathbf B}= {\\mathcal H}^{-1}\\tilde{\\boldsymbol\\Delta}^{-1}\\tilde {\\mathbf D}^{-1} {\\mathbf G}\\), \\(\\tilde{\\boldsymbol\\Delta}\\\\mathbb{R}^{\\tilde R \\times m}\\) consists partial derivatives pairwise probabilities, .e. \\(\\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k}\\); \\(\\tilde{\\mathbf D}= \\mathop{\\mathrm{diag}}((\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta}))_{<j})\\); \\({\\mathbf G}\\) indicator matrix transform quantities \\(\\tilde R\\) dimensions \\(R\\) dimensions. See articles details.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"goodness-of-fit","dir":"Articles","previous_headings":"","what":"Goodness-of-fit","title":"Technical details","text":"Collect sample proportions \\(p_r = \\hat n_r/n\\), \\(r=1,\\dots,R\\) form \\(R\\)-vector proportions \\({\\mathbf p}\\). independent samples, widely known (Agresti 2012) \\[\\begin{equation} \\sqrt N ({\\mathbf p}- {\\boldsymbol\\pi}) \\xrightarrow{\\text D} {\\mathop{\\mathrm{N}}}_R ({\\mathbf 0}, {\\boldsymbol\\Sigma}), \\tag{4} \\end{equation}\\] \\({\\boldsymbol\\Sigma}= {\\mathbf D}- {\\boldsymbol\\pi}{\\boldsymbol\\pi}^\\top\\), \\({\\mathbf D}:= \\mathop{\\mathrm{diag}}({\\boldsymbol\\pi})\\). Considering parametric model, proportion vector (4) reads \\({\\boldsymbol\\pi}= {\\boldsymbol\\pi}({\\boldsymbol\\theta})\\). analogous result complex sampling design case exists well (Fuller 2009); however covariance matrix \\({\\boldsymbol\\Sigma}\\) need take multinomial form, true proportions \\({\\boldsymbol\\pi}\\) may either finite population superpopulation quantity. Suppose denote \\({\\boldsymbol\\pi}(\\hat{\\boldsymbol\\theta})\\) estimated proportions parametric model. estimators \\(\\hat{\\boldsymbol\\theta}\\) satisfying (3), Maydeu-Olivares Joe (2005) show distribution residuals \\(\\hat{\\mathbf e}= {\\mathbf p}- {\\boldsymbol\\pi}(\\hat{\\boldsymbol\\theta})\\) asymptotically normal: \\[\\begin{equation} \\sqrt n \\hat{\\mathbf e}= \\sqrt n \\big( {\\mathbf p}- {\\boldsymbol\\pi}(\\hat{\\boldsymbol\\theta}) \\big) \\xrightarrow{\\text D} {\\mathop{\\mathrm{N}}}_R ({\\mathbf 0}, {\\boldsymbol\\Omega}) \\end{equation}\\] \\[\\begin{align} {\\boldsymbol\\Omega} &= ({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B}){\\boldsymbol\\Sigma}({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B})^\\top \\\\ &= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}^\\top - {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}+ {\\boldsymbol\\Delta}{\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf B}^\\top {\\boldsymbol\\Delta}^\\top, \\end{align}\\] \\({\\mathbf B}\\) transformation matrix \\({\\boldsymbol\\Delta}\\) matrix partial derivatives \\({\\boldsymbol\\pi}({\\boldsymbol\\theta})\\) (described previously). Maydeu-Olivares Joe (2005) remarks maximum likelihood estimators, residual covariance matrix simplifies \\({\\boldsymbol\\Omega}= {\\boldsymbol\\Sigma}- {\\boldsymbol\\Delta}{\\mathcal }^{-1}_1{\\boldsymbol\\Delta}^\\top\\). think simplification exists pairwise likelihood case [Hold thought. Maybe ’s possible. Still investigating.].","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"lower-order-residuals","dir":"Articles","previous_headings":"Goodness-of-fit","what":"Lower-order residuals","title":"Technical details","text":"interest obtaining lower-order marginals full \\(R\\)-dimensional probability vector \\({\\boldsymbol\\pi}\\). Namely, like get Univariate moments form \\(\\dot\\pi_i = \\Pr(Y_i=1)\\) (\\(p\\)) \\[ \\dot{\\boldsymbol\\pi}_1^\\top = (\\dot\\pi_1,\\dots,\\dot\\pi_p) \\[0,1]^p \\] Bivariate moments form \\(\\dot\\pi_{ij}=\\Pr(Y_i=1,Y_j=1)\\) (\\({p \\choose 2}\\)) \\[ \\dot{\\boldsymbol\\pi}_2^\\top = \\Big(\\dot\\pi_{ij} \\Big)_{\\substack{,j=1\\\\<j}}^n \\[0,1]^{p(p-1)/2} \\] bivariate moments particular especially relevant considering pairwise likelihood estimation parametric model. Denote \\({\\boldsymbol\\pi}_2 = \\begin{pmatrix}\\dot{{\\boldsymbol\\pi}}_1\\\\ \\dot{{\\boldsymbol\\pi}}_2 \\end{pmatrix}\\) \\(S:=p(p+1)/2\\) vector univariate bivariate moments. Correspondinly, let \\({\\mathbf p}_2\\) \\(S\\)-vector univariate bivariate sample moments. possible obtain \\({\\boldsymbol\\pi}_2\\) (well \\({\\mathbf p}_2\\)) via transformation full vector probabilities \\({\\boldsymbol\\pi}\\) (c.f. \\({\\mathbf p}\\)): \\[\\begin{equation} {\\boldsymbol\\pi}_2 = {\\mathbf T}_2 {\\boldsymbol\\pi}. \\end{equation}\\] , \\({\\mathbf T}_2\\) indicator matrix dimension \\(S \\times R\\). See articles details. Consider now lower order residuals order 2 parametric model, defined \\[\\begin{equation} \\hat{\\mathbf e}_2 = {\\mathbf p}_2 - {\\boldsymbol\\pi}_2(\\hat{\\boldsymbol\\theta}) = {\\mathbf T}_2 \\big({\\mathbf p}- {\\boldsymbol\\pi}(\\hat{\\boldsymbol\\theta}) \\big) = {\\mathbf T}_2\\hat{\\mathbf e}. \\end{equation}\\] straightforward see, using previous results, \\(n\\\\infty\\) get \\[\\begin{equation} \\sqrt n \\hat{\\mathbf e}_2 = \\sqrt N \\big({\\mathbf p}_2 - {\\boldsymbol\\pi}_2(\\hat{\\boldsymbol\\theta})\\big) \\xrightarrow{\\text D} \\mathop{\\mathrm{N}}({\\mathbf 0}, {\\boldsymbol\\Omega}_2), \\tag{5} \\end{equation}\\] \\[\\begin{align} {\\boldsymbol\\Omega}_2 = {\\mathbf T}_2{\\boldsymbol\\Omega}{\\mathbf T}_2^\\top &= {\\mathbf T}_2 ({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B}){\\boldsymbol\\Sigma}({\\mathbf }- {\\boldsymbol\\Delta}{\\mathbf B})^\\top  {\\mathbf T}_2^\\top  \\\\ &= {\\boldsymbol\\Sigma}_2 - {\\mathbf T}_2{\\boldsymbol\\Sigma}{\\mathbf B}^\\top{\\boldsymbol\\Delta}_2^\\top - {\\boldsymbol\\Delta}_2 {\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf T}_2^\\top + {\\boldsymbol\\Delta}_2 {\\mathbf B}{\\boldsymbol\\Sigma}{\\mathbf B}^\\top {\\boldsymbol\\Delta}_2^\\top, \\tag{6} \\end{align}\\] \\({\\boldsymbol\\Sigma}_2 = {\\mathbf T}_2{\\boldsymbol\\Sigma}{\\mathbf T}_2^\\top\\) \\({\\boldsymbol\\Delta}_2={\\mathbf T}_2{\\boldsymbol\\Delta}\\) transformed version respective matrices. specific case maximum likelihood estimation, simplifies \\({\\boldsymbol\\Omega}_2 = {\\boldsymbol\\Sigma}_2 - {\\boldsymbol\\Delta}_2 {\\mathcal }_1^{-1} {\\boldsymbol\\Delta}_2^\\top\\). pairwise likelihood estimation, show \\[ {\\boldsymbol\\Omega}_2 = ({\\mathbf }- {\\boldsymbol\\Delta}_2{\\mathbf B}_2){\\boldsymbol\\Sigma}_2({\\mathbf }- {\\boldsymbol\\Delta}_2{\\mathbf B}_2)^\\top, \\tag{7} \\] transformation matrix full given \\({\\mathbf B}_2 = {\\mathcal H}^{-1}\\tilde{\\boldsymbol\\Delta}^\\top\\tilde{\\mathbf D}^{-1}{\\mathbf G}{\\mathbf T}_2\\). posterity, \\({\\mathbf B}({\\boldsymbol\\theta})\\) matrix manuscript actually \\({\\mathbf B}({\\boldsymbol\\theta}) = \\tilde{\\boldsymbol\\Delta}^\\top\\tilde{\\mathbf D}^{-1} B\\), indicator matrix \\(B\\) \\(B = {\\mathbf G}{\\mathbf T}_2\\) notation present article. remark, elegant theory, forming matrix \\({\\boldsymbol\\Omega}_2\\) via linear transformation \\({\\mathbf T}_2\\) impractical \\(p\\) large two reasons. One, involves multiplying \\(S \\times R\\) matrix \\(R \\times R\\) matrix, computation order \\(O(SR^2) = O(p(p+1)2^{2p-1})\\). Two, storage requirements \\(R\\times R\\) matrix (e.g. \\({\\boldsymbol\\Sigma}\\)) may possibly large /involve small numbers, precision might concern. advantage equation (7) \\({\\boldsymbol\\Omega}_2\\) can formed using byproduct pairwise estimation procedure, .e. using matrices \\({\\mathcal H}\\) \\(\\tilde{\\boldsymbol\\Delta}\\), well (estimated) pairwise probabilities \\(\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})\\). remains proper estimation \\({\\boldsymbol\\Sigma}_2\\), depends sampling design performed. complex sampling procedure article touches upon briefly, details available manuscript.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"summary","dir":"Articles","previous_headings":"Goodness-of-fit","what":"Summary","title":"Technical details","text":"general, (limited information) goodness--fit test statistics take form \\[ X^2 = n \\hat{\\mathbf e}_2^\\top \\hat{\\boldsymbol\\Xi}\\hat{\\mathbf e}_2, \\tag{8} \\] \\(\\hat{\\boldsymbol\\Xi}\\xrightarrow{\\text P} {\\boldsymbol\\Xi}\\) \\(S\\times S\\) weight matrix. summarise various weight matrices use R package: noted tests, exception Wald V3 test, requires estimation \\({\\boldsymbol\\Omega}_2\\) matrices. purpose, use sample versions relevant quantities, mostly evaluating \\(\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})\\) estimates \\({\\boldsymbol\\theta}=\\hat{\\boldsymbol\\theta}_{\\text{PL}}\\), .e. \\({\\mathbf H}= - \\nabla^2\\operatorname{\\ell_P}({\\boldsymbol\\theta}) \\Big|_{{\\boldsymbol\\theta}=\\hat{\\boldsymbol\\theta}_{\\text{PL}}}\\) estimating \\({\\mathcal H}\\); \\(\\hat{\\tilde{\\boldsymbol\\Delta}_{sk}} = \\frac{\\partial\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta})}{\\partial\\theta_k} \\Big|_{{\\boldsymbol\\theta}=\\hat{\\boldsymbol\\theta}_{\\text{PL}}}\\); \\(\\hat{\\tilde{\\mathbf D}} = \\mathop{\\mathrm{diag}}(\\hat\\pi_{y_iy_j}^{(ij)}({\\boldsymbol\\theta}))\\); appropriate estimator \\({\\boldsymbol\\Sigma}_2\\). general, test statistics chi square variates. However, tests, degrees freedom known priori estimated. two methods consider: 1) Rao-Scott type adjustment (Rao Scott 1979; Rao Scott 1981; Rao Scott 1984); 2) moment matching procedure (Bartholomew Leung 2002). theory test may subjected either Rao-Scott type adjustment moment matching procedure, consider Rao-Scott adjustment Pearson test.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test statistics","title":"Technical details","text":"section, elaborate specific test statistics used.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"wald-test","dir":"Articles","previous_headings":"Test statistics","what":"Wald test","title":"Technical details","text":"One strategy choose \\({\\boldsymbol\\Xi}\\) resulting quadratic form \\(X^2\\) (8) asymptotically chi-square. strategy followed Reiser (1996), Maydeu-Olivares Joe (2005), Maydeu-Olivares Joe (2006). Choosing \\(\\hat{\\boldsymbol\\Xi}= \\hat\\Omega_2^-\\) (generalised inverse); \\(\\hat{\\boldsymbol\\Xi}= \\hat\\Omega_2^+\\) (Moore-Penrose inverse) ensures \\(X^2 \\xrightarrow{\\text D} \\chi^2_k\\) \\(k\\) equals rank \\({\\boldsymbol\\Omega}_2\\). pseudoinverse needs employed \\({\\boldsymbol\\Omega}_2\\) may deficient rank. \\({\\boldsymbol\\Omega}_2\\) full rank (rank = \\(S\\)), \\({\\boldsymbol\\Xi}\\) equal usual matrix inverse. implementation, similar Reiser (1996), using Moore-Penrose inverse. Finally, degrees freedom () \\(S-m\\), .e. \\(S\\) minus number free model parameters need estimated.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"diagonal-wald-test","dir":"Articles","previous_headings":"Test statistics","what":"Diagonal Wald test","title":"Technical details","text":"alternative Wald test studied \\(\\hat{\\boldsymbol\\Xi}= \\mathop{\\mathrm{diag}}(\\hat{\\boldsymbol\\Omega}_2)^{-1}\\) used instead pseudoinverse \\({\\boldsymbol\\Omega}_2\\). refer Diagonal Wald test. motivation stability ease computation straightforward inverse diagonal matrix rather full matrix grows rapidly number items \\(p\\). However, follow chi-square distribution original Wald test, distribution needs determined (Bartholomew Leung 2002). use moment-matching procedure , briefly explain . Suppose \\(Y\\sim \\chi^2_c\\). assume test statistic \\(X^2 = n\\hat{\\mathbf e}_2 \\hat{\\boldsymbol\\Xi}\\hat{\\mathbf e}_2\\) can approximated linear transformation chi square random variate, .e. \\[ X^2 \\approx + \\] Let \\(\\mu_k(X)=\\mathop{\\mathrm{E}}[(X - \\mathop{\\mathrm{E}}X)^k]\\) represent \\(k\\)th central moment random variable \\(X\\). first three asymptotic central moments \\(X^2\\) (Mathai Provost 1992 Theorem 3.2b.2, p.53) \\[\\begin{equation} \\mu_1(X^2) = \\operatorname{tr}(\\hat{\\boldsymbol\\Xi}{\\boldsymbol\\Omega}_2), \\hspace{1em} \\mu_2(X^2) = 2\\operatorname{tr}\\big((\\hat{\\boldsymbol\\Xi}{\\boldsymbol\\Omega}_2)^2\\big), \\hspace{1em} \\mu_3(X^2) = 8\\operatorname{tr}\\big((\\hat{\\boldsymbol\\Xi}{\\boldsymbol\\Omega}_2)^3\\big), \\tag{9} \\end{equation}\\] first three central moments approximating random variables \\[\\begin{equation} \\mu_1 = + bc, \\hspace{2em} \\mu_2 = 2b^2c, \\hspace{2em} \\mu_3 = 8b^3c. \\tag{10} \\end{equation}\\] Useful note relationships \\(\\mu_1=\\mathop{\\mathrm{E}}(Y)\\), \\(\\mu_2=\\mathop{\\mathrm{Var}}(Y)\\), \\(\\mu_3=\\mathop{\\mathrm{E}}(Y^3)-3\\mu\\mathop{\\mathrm{Var}}(Y)-\\mu^3\\) random variable \\(Y\\), raw moments chi-square random variable \\(c\\) degrees freedom given formula \\(\\mathop{\\mathrm{E}}(Y^k)=c(c+2)(c+4)\\cdots(c+2k-2)\\). Equating two sets moments (9) (10) yields three-moment adjustment parameters \\[\\begin{equation} b = \\frac{\\mu_3(X^2)}{4\\mu_2(X^2)}, \\hspace{2em} c = \\frac{\\mu_2(X^2)}{2b^2}, \\hspace{2em} = \\mu_1(X^2) - bc. \\end{equation}\\] Tail area probabilities \\(p\\)-value calculations can computed follows: \\[\\begin{equation} \\Pr(X^2 > x) \\approx \\Pr\\left(Y > \\frac{x-}{b} \\ \\Big| \\ Y \\sim \\chi^2_c\\right). \\end{equation}\\] can also use two-moments one-moment matching techniques similarly. two-moment adjustment, assume \\(X^2 \\approx \\) \\(Y\\sim\\chi^2_c\\). matching first two asymptotic moments \\(X^2\\) approximating random variable gives \\[\\begin{equation} b = \\frac{\\mu_2(X^2)}{2\\mu_1(X^2)} \\hspace{1em}\\text{}\\hspace{1em} c = \\frac{\\mu_1(X^2)}{b}. \\end{equation}\\] one-moment adjustment, \\(X^2\\) approximated \\(Y\\sim\\chi^2_c\\), \\(c\\) fixed number degrees freedom available testing (taken \\(c=S-m\\)). Solving \\(b\\) yields \\[\\begin{equation} b = \\frac{\\mu_1(X^2)}{c}. \\end{equation}\\] cases, tail probabilities calculated \\[\\begin{equation} \\Pr(X^2 > x) \\approx \\Pr\\left(Y > \\frac{x}{b} \\ \\Big| \\ Y \\sim \\chi^2_c\\right). \\end{equation}\\] Maydeu-Olivares Joe (2008) advises one-moment matching results inaccurate \\(p\\)-values.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"variance-covariance-free-wald-test","dir":"Articles","previous_headings":"Test statistics","what":"Variance-covariance free Wald test","title":"Technical details","text":"drawbacks using \\(\\hat{\\boldsymbol\\Omega}_2^+\\) weight matrix quadratic form 1) \\({\\boldsymbol\\Omega}_2\\) needs estimated; 2) degrees freedom \\(k\\) determined priori can tricky (done looking small eigenvalues, can tricky judge wchih actually zero). overcome , Maydeu-Olivares Joe (2005) Maydeu-Olivares Joe (2006) suggested using weight matrix \\({\\boldsymbol\\Xi}\\) \\({\\boldsymbol\\Omega}_2\\) g-inverse \\({\\boldsymbol\\Xi}\\), .e. \\({\\boldsymbol\\Xi}= {\\boldsymbol\\Xi}{\\boldsymbol\\Omega}_2{\\boldsymbol\\Xi}\\).         Let \\({\\boldsymbol\\Delta}_2^\\perp\\) \\(S \\times (S-m)\\) orthogonal complement \\({\\boldsymbol\\Delta}_2\\), .e. satisfies \\(({\\boldsymbol\\Delta}_2^\\perp)^\\top{\\boldsymbol\\Delta}_2 = {\\mathbf 0}\\). (5), see \\[ \\sqrt n ({\\boldsymbol\\Delta}_2^\\perp)^\\top \\hat {\\mathbf e}_2 \\xrightarrow{\\text D} \\mathop{\\mathrm{N}}({\\mathbf 0}, ({\\boldsymbol\\Delta}_2^\\perp)^\\top {\\boldsymbol\\Omega}_2 {\\boldsymbol\\Delta}_2^\\perp). \\tag{11} \\] (6), asymptotic covariance matrix may written \\[ ({\\boldsymbol\\Delta}_2^\\perp)^\\top {\\boldsymbol\\Omega}_2 {\\boldsymbol\\Delta}_2^\\perp = ({\\boldsymbol\\Delta}_2^\\perp)^\\top {\\boldsymbol\\Sigma}_2 {\\boldsymbol\\Delta}_2^\\perp, \\] since multiplications \\({\\boldsymbol\\Delta}_2\\) orthogonal complement cancels . letting \\[ {\\boldsymbol\\Xi}= {\\boldsymbol\\Delta}_2^\\perp \\big( ({\\boldsymbol\\Delta}_2^\\perp)^\\top {\\boldsymbol\\Sigma}_2 {\\boldsymbol\\Delta}_2^\\perp \\big)^{-1} ({\\boldsymbol\\Delta}_2^\\perp)^\\top, \\] can verify \\({\\boldsymbol\\Xi}= {\\boldsymbol\\Xi}{\\boldsymbol\\Omega}_2{\\boldsymbol\\Xi}\\); , \\({\\boldsymbol\\Omega}_2\\) generalised inverse \\({\\boldsymbol\\Xi}\\). Let \\(\\hat{\\boldsymbol\\Xi}\\) appropriate estimate \\({\\boldsymbol\\Xi}\\), e.g. replacing matrices corresponding hat versions. implication \\[ X^2 = n \\hat{\\mathbf e}_2^\\top \\hat{\\boldsymbol\\Xi}\\hat{\\mathbf e}_2 = n \\hat{\\mathbf e}_2^\\top  \\hat{\\boldsymbol\\Delta}_2^\\perp \\big( (\\hat{\\boldsymbol\\Delta}_2^\\perp)^\\top \\hat{\\boldsymbol\\Sigma}_2 \\hat{\\boldsymbol\\Delta}_2^\\perp \\big)^{-1} (\\hat{\\boldsymbol\\Delta}_2^\\perp)^\\top \\hat{\\mathbf e}_2 \\] converges distribution \\(\\chi^2_{S-m}\\) variate \\(n\\\\infty\\) due (11) Slutsky’s theorem. degrees freedom \\({\\boldsymbol\\Delta}_2^\\perp\\) full column rank \\(S-m\\) hence \\({\\boldsymbol\\Xi}\\) also rank \\(S-m\\). dimensions vector space orthogonal complement always add dimension whole space. Since \\({\\boldsymbol\\Delta}_2 \\\\mathbb{R}^{S\\times m}\\) dimension (column rank) \\(m\\), column space orthogonal complement \\(\\mathbb{R}^S\\), thus dimension orthogonal complement \\(S-m\\).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/articles/tech_details.html","id":"pearson-test","dir":"Articles","previous_headings":"Test statistics","what":"Pearson test","title":"Technical details","text":"construct Pearson test statistic, let \\(\\hat{\\boldsymbol\\Xi}^{-1} = \\hat{\\mathbf D}_2 := \\mathop{\\mathrm{diag}}\\big( {\\boldsymbol\\pi}_2(\\hat{\\boldsymbol\\theta}) \\big) \\xrightarrow{\\text P} {\\mathbf D}_2:=\\mathop{\\mathrm{diag}}\\big( {\\boldsymbol\\pi}_2({\\boldsymbol\\theta}) \\big).\\) can see \\[\\begin{equation}\\label{eq:Pearsontest} X^2 = n\\hat{\\mathbf e}_2^\\top\\hat{\\mathbf D}_2^{-1}\\hat{\\mathbf e}_2 = n \\sum_{r=1}^R \\frac{(\\dot p_r - \\dot\\pi_r(\\hat{\\boldsymbol\\theta}))^2}{\\dot\\pi_r(\\hat{\\boldsymbol\\theta})} + n \\sum_{r<s} \\frac{(\\dot p_{rs} - \\dot\\pi_{rs}(\\hat{\\boldsymbol\\theta}))^2}{\\dot\\pi_{rs}(\\hat{\\boldsymbol\\theta})}, \\end{equation}\\] resembles traditional Pearson chi-square test statistic. Note \\[\\begin{equation} \\sqrt n \\hat{\\mathbf D}_2^{-1/2}\\hat{\\mathbf e}_2 \\xrightarrow{\\text D} \\mathop{\\mathrm{N}}({\\mathbf 0}, {\\mathbf D}_2^{-1/2}{\\boldsymbol\\Omega}_2 {\\mathbf D}_2^{-1/2}) \\end{equation}\\] \\(N\\\\infty\\), therefore \\(X^2\\) limiting distribution \\(\\sum_{s=1}^S \\delta_s X_s\\), \\(\\delta_s\\) eigenvalues \\(n^{-1} {\\mathbf D}_2^{-1/2}{\\boldsymbol\\Omega}_2 {\\mathbf D}_2^{-1/2}\\) \\(X_s\\,\\overset{\\text{iid}}{\\sim}\\,\\chi^2_1\\) (Mathai Provost 1992, Representation 3.1a.1, p.29). eigenvalues can estimated eigenvalues \\(n^{-1} \\hat{\\mathbf D}_2^{-1/2}\\hat{\\boldsymbol\\Omega}_2 \\hat {\\mathbf D}_2^{-1/2}\\). principle, method can applied generally considering Choleski decomposition \\({\\boldsymbol\\Xi}= {\\mathbf L}{\\mathbf L}^\\top\\) instead matrix square roots. course, works matrix \\({\\boldsymbol\\Xi}\\) full rank, rules Wald test statistic . Let \\(\\bar\\delta\\) represent arithmetic mean eigenvalues \\(\\delta_s\\). asymptotic mean variance \\(X^2\\) \\[\\begin{align} \\mathop{\\mathrm{E}}X^2 &= \\mathop{\\mathrm{E}}\\sum_{s=1}^S \\delta_s X_s = \\sum_{s=1}^S \\delta_s = S\\bar\\delta = \\operatorname{tr}(n^{-1} {\\mathbf D}_2^{-1/2}{\\boldsymbol\\Omega}_2 {\\mathbf D}_2^{-1/2}) \\\\ \\mathop{\\mathrm{Var}}X^2 &= \\mathop{\\mathrm{Var}}\\sum_{s=1}^S \\delta_s X_s = 2\\sum_{s=1}^S\\delta_s^2 = 2\\sum_{s=1}^S (\\delta_s - \\bar\\delta)^2 + 2S\\bar\\delta^2, \\end{align}\\] seems power test affected size dispersion eigenvalues (Heo 2014). Rao Scott (1979);Rao Scott (1981);Rao Scott (1984) suggested adjustments Pearson test follows. First-order Rao-Scott type test obtained dividing \\(X^2\\) \\(\\bar \\delta\\). statistic distributed \\(\\chi^2_S\\). Second-order Rao-Scott type test obtained dividing \\(X^2/\\bar\\delta\\) \\(1+\\hat ^2\\), \\(\\hat =\\sqrt{S^{-1}\\sum_{s=1}^S (\\delta_s - \\bar\\delta)}\\big/\\bar\\delta\\) coefficient variation eigenvalues. Hence, \\(1+\\hat ^2= (S\\bar\\delta ^2)^{-1}\\sum_{s=1}^s \\delta_s^2\\). statistic distributed \\(\\chi^2_k\\) \\(k=S(1+\\hat ^2)^{-1}\\).","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Haziq Jamil. Author, maintainer. Irini Moustaki. Contributor. Myrsini Katsikatsou. Contributor.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jamil H (2023). lavaan.bingof: Limited Information Goodness Fit Tests Binary Factor Models. https://github.com/haziqj/lavaan.bingof, https://haziqj.ml/lavaan.bingof/.","code":"@Manual{,   title = {lavaan.bingof: Limited Information Goodness of Fit Tests for Binary Factor Models},   author = {Haziq Jamil},   year = {2023},   note = {https://github.com/haziqj/lavaan.bingof, https://haziqj.ml/lavaan.bingof/}, }"},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"lavaanbingof","dir":"","previous_headings":"","what":"Limited Information Goodness of Fit Tests for Binary Factor Models","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"accompanying R package research paper Jamil, H., Moustaki, ., & Skinner, C. (2023). Goodness--fit tests composite likelihood estimation simple random complex survey sampling. Manuscript preparation. package contains functions compute test statistics conduct simulation studies described manuscript. Currently, package implements following tests based univariate bivariate residuals binary factor analysis model:","code":""},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"Install package GitHub repository: Note: package depends modified lavaan package version 0.6-14.9001, can installed GitHub repository haziqj/lavaan.","code":"# install.packages(\"pak\")  pak::pkg_install(\"haziqj/lavaan.bingof\") library(lavaan.bingof)  # load package"},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"three main functionalities package: Generate simulated data either infinite population finite population using complex sampling procedure. Obtain test statistic values, degrees freedom chi-square variates, corresponding p-values determine goodness--fit. Wrap functions 1 2 convenient way perform simulation studies Type errors power.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"create-a-simulated-data-set-of-ordinal-binary-responses","dir":"","previous_headings":"Usage","what":"Create a simulated data set of ordinal binary responses","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"","code":"(dat <- gen_data_bin(n = 1000, seed = 123)) #> # A tibble: 1,000 × 5 #>    y1    y2    y3    y4    y5    #>    <ord> <ord> <ord> <ord> <ord> #>  1 1     0     0     1     1     #>  2 1     1     1     1     1     #>  3 1     1     1     0     1     #>  4 1     1     0     1     1     #>  5 1     1     0     1     1     #>  6 1     1     1     1     1     #>  7 1     1     1     1     0     #>  8 1     1     1     1     1     #>  9 1     1     1     1     1     #> 10 1     0     0     1     1     #> # ℹ 990 more rows"},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"obtain-the-various-test-statistics-and-p-values","dir":"","previous_headings":"Usage","what":"Obtain the various test statistics and p-values","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"","code":"# Fit lavaan model using PML estimation (mod <- txt_mod(model_no = 1)) #> [1] \"eta1 =~ NA*y1 + y2 + y3 + y4 + y5\" fit <- lavaan::sem(mod, dat, std.lv = TRUE, estimator = \"PML\")  # Test statistics all_tests(fit) #> # A tibble: 7 × 6 #>      X2    df name          pval W_rank     S #>   <dbl> <dbl> <chr>        <dbl>  <int> <int> #> 1 2.81   5    Wald         0.730     14    15 #> 2 0.862  3.31 WaldDiag,MM3 0.872     15    15 #> 3 2.80   5    WaldVCF      0.730      5    15 #> 4 2.46   4.41 PearsonRS    0.710     15    15 #> 5 1.86   3.63 Pearson,MM3  0.709     15    15 #> 6 2.30   4.18 RSS,MM3      0.707     15    15 #> 7 2.79   5.00 Multn,MM3    0.732     15    15"},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"test-statistics-under-a-complex-sampling-scheme","dir":"","previous_headings":"Usage","what":"Test statistics under a complex sampling scheme","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"","code":"# Simulate a two-stage stratified cluster sampling with 50 PSUs sampled per # stratum, and 1 cluster sampled within each PSU. (dat <- gen_data_bin_strcl(population = make_population(1), npsu = 50,                             seed = 9423)) #> # A tibble: 3,040 × 9 #>    type  school class    wt y1    y2    y3    y4    y5    #>    <chr> <chr>  <chr> <dbl> <ord> <ord> <ord> <ord> <ord> #>  1 A     A105   A105o 0.651 1     1     1     1     1     #>  2 A     A105   A105o 0.651 1     1     1     1     1     #>  3 A     A105   A105o 0.651 1     1     1     1     1     #>  4 A     A105   A105o 0.651 1     1     1     1     1     #>  5 A     A105   A105o 0.651 1     1     0     1     1     #>  6 A     A105   A105o 0.651 1     1     1     1     1     #>  7 A     A105   A105o 0.651 1     1     0     1     1     #>  8 A     A105   A105o 0.651 1     1     1     1     1     #>  9 A     A105   A105o 0.651 1     1     1     1     1     #> 10 A     A105   A105o 0.651 1     1     1     1     1     #> # ℹ 3,030 more rows  # Fit lavaan model and create survey object fit0 <- lavaan::sem(mod, dat, std.lv = TRUE, estimator = \"PML\")  # ignore wt fit1 <- lavaan::sem(mod, dat, std.lv = TRUE, estimator = \"PML\",                     sampling.weights = \"wt\") svy <- survey::svydesign(ids = ~ school + class, strata = ~ type,                          weights = ~ wt, data = dat, nest = TRUE)  # Compare with and without sampling weights Wald_test(fit0) #>         X2 df name      pval W_rank  S #> 1 4.561825  5 Wald 0.4716543     13 15 Wald_test(fit1, svy_design = svy) #>         X2 df name      pval W_rank  S #> 1 4.633965  5 Wald 0.4621618     13 15"},{"path":"https://haziqj.ml/lavaan.bingof/index.html","id":"simulation-wrapper","dir":"","previous_headings":"Usage","what":"Simulation wrapper","title":"Limited Information Goodness of Fit Tests for Binary Factor Models","text":"","code":"# Conduct a simulation study based on a 5 factor model (32 repetitions only for # illustration). Data generated according to a stratified complex sample. (pc <- parallel::detectCores())   # how many cores do we have? #> [1] 32  res <- run_ligof_sims(model_no = 1, nsim = pc, ncores = pc - 2, samp = \"strat\",                       simtype = \"type1\") #>|======================================================================| 100% res #>  #> ── LIGOF simulations ─────────────────────────────────────────────────────────── #>  #> Settings #> Number of replications: 32 #> Model: 1 (1F 5V) #> Sampling design: Stratified sampling #> Sample size: 1000 #>  #> Simulations completed in 23.2 secs summary(res) #>  #> ── LIGOF simulations summary ─────────────────────────────────────────────────── #>  #> Model 1 (1F 5V) using stratified sampling design (n = 1000) #> • Converged: 32 / 32 #> • Rank deficient: 0 / 32 #> • Significance level: 0.05 #>  #>  #> ============  ==============  =============  ========= #> Test name     Rejection rate  Mean X2 value  Mean d.f. #> ============  ==============  =============  ========= #> Wald                   0.062           5.11       5.00 #> WaldDiag,MM3           0.000           2.99       3.44 #> WaldVCF                0.062           4.89       5.00 #> PearsonRS              0.062           3.75       4.15 #> Pearson,MM3            0.031           2.67       3.04 #> RSS,MM3                0.031           3.30       3.62 #> Multn,MM3              0.062           4.92       4.99 #> ============  ==============  =============  ========="},{"path":"https://haziqj.ml/lavaan.bingof/reference/all_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Return all test statistics values — all_tests","title":"Return all test statistics values — all_tests","text":"Return test statistics values","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/all_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return all test statistics values — all_tests","text":"","code":"all_tests(   object,   svy_design = NULL,   sim = NULL,   Sigma2 = NULL,   bootstrap = FALSE,   nboot = 100 )"},{"path":"https://haziqj.ml/lavaan.bingof/reference/all_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return all test statistics values — all_tests","text":"object lavaan::lavaan() fit object. svy_design (optional) survey::svydesign() object. sim (integer) Optional used large-scale simulations. Sigma2 (internal testing ) bootstrap (boolean) Use svyrep package compute bootstrap variance estimator? nboot (integer) Optional bootstrap = TRUE many bootstrap replications?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/all_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return all test statistics values — all_tests","text":"Additionally, sim argument provided, two columns appended: Whether lavaan::lavaan()  fit converged matrix rank \\(\\Omega_2\\) (useful see computational issues arose model fit.)","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/all_tests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return all test statistics values — all_tests","text":"","code":"fit <- lavaan::sem(txt_mod(1), gen_data_bin(1, n = 500), std.lv = TRUE,                    estimator = \"PML\") all_tests(fit) #> # A tibble: 6 × 6 #>      X2    df name          pval Xi_rank     S #>   <dbl> <dbl> <chr>        <dbl>   <int> <int> #> 1  5.50  5    Wald         0.358      14    15 #> 2  5.47  5    WaldVCF      0.361       5    15 #> 3  4.50  3.72 WaldDiag,MM3 0.304      15    15 #> 4  5.91  5.02 WaldDiag,RS2 0.318      15    15 #> 5  3.52  3.69 Pearson,MM3  0.426      15    15 #> 6  4.28  4.46 Pearson,RS2  0.434      15    15"},{"path":"https://haziqj.ml/lavaan.bingof/reference/create_resp_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table of binary response patterns — create_resp_pattern","title":"Create a table of binary response patterns — create_resp_pattern","text":"Ordering incremental patterns power 2 right left.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/create_resp_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table of binary response patterns — create_resp_pattern","text":"","code":"create_resp_pattern(p = 3)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/create_resp_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table of binary response patterns — create_resp_pattern","text":"p (integer > 0) number items.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/create_resp_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table of binary response patterns — create_resp_pattern","text":"tibble() containing ordinal binary values (0/1) items well column indicating one \\(2^p\\) response patterns.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/create_resp_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table of binary response patterns — create_resp_pattern","text":"","code":"create_resp_pattern(p = 3) #> # A tibble: 8 × 4 #>   y1    y2    y3    pattern #>   <ord> <ord> <ord> <chr>   #> 1 1     1     1     111     #> 2 1     1     0     110     #> 3 1     0     1     101     #> 4 1     0     0     100     #> 5 0     1     1     011     #> 6 0     1     0     010     #> 7 0     0     1     001     #> 8 0     0     0     000"},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate independent data samples according to model_no — gen_data_bin","title":"Generate independent data samples according to model_no — gen_data_bin","text":"Generate independent data samples according model_no","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate independent data samples according to model_no — gen_data_bin","text":"","code":"gen_data_bin(   model_no = 1,   n = 1000,   seed = NULL,   H1 = FALSE,   return_all = FALSE )"},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate independent data samples according to model_no — gen_data_bin","text":"model_no (integer) Choose 1--5. See pkgdown articles details. n (numeric > 0) Sample size. seed (numeric) random seed. H1 (logical) generating data misspecify true model? power simulations. return_all (logical) Return underlying latent variable \\(y^*\\) well?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate independent data samples according to model_no — gen_data_bin","text":"tibble() containing ordinal binary values (0/1) items.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate independent data samples according to model_no — gen_data_bin","text":"","code":"gen_data_bin(1) #> # A tibble: 1,000 × 5 #>    y1    y2    y3    y4    y5    #>    <ord> <ord> <ord> <ord> <ord> #>  1 1     0     0     1     1     #>  2 1     0     0     1     1     #>  3 0     0     0     1     1     #>  4 1     1     0     1     1     #>  5 1     1     1     0     0     #>  6 1     1     1     1     1     #>  7 1     1     1     1     1     #>  8 1     1     1     1     1     #>  9 1     1     0     0     1     #> 10 1     1     0     1     1     #> # ℹ 990 more rows"},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the school population — gen_data_bin_complex","title":"Sample from the school population — gen_data_bin_complex","text":"several functions simulate complex (even simple random) sampling procedure school population generated make_population(): gen_data_bin_srs() performs simple random sample entire population. gen_data_bin_strat() performs stratified sampling procedure school type strata, students PSU. gen_data_bin_clust() performs two-stage cluster sampling procedure (ignoring strata) schools PSU, clustering class. gen_data_bin_strcl() performs two-stage stratified cluster sampling procedure students nested within class within school (PSU) within type (strata).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the school population — gen_data_bin_complex","text":"","code":"gen_data_bin_srs(   population = make_population(1, seed = NULL),   npsu = 3000,   n,   seed = NULL )  gen_data_bin_strat(   population = make_population(1, seed = NULL),   npsu = 1000,   n,   seed = NULL )  gen_data_bin_clust(   population = make_population(1, seed = NULL),   npsu = 140,   n,   seed = NULL )  gen_data_bin_strcl(   population = make_population(1, seed = NULL),   npsu = 50,   n,   seed = NULL )"},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the school population — gen_data_bin_complex","text":"population (tibble) Population generated make_population(). npsu (integer > 0) stratified sampling, number students within strata sample. cluster sampling, number schools (clusters) sample. stratified cluster sampling, also number schools (clusters) per school type (strata). SRS procedure, exact sample size. n (optional,integer > 0) Sample size. provided, npsu argument ignored adjusted accordingly achieve sample size (approximately) n. seed (numeric) random seed.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the school population — gen_data_bin_complex","text":"tibble() containing ordinal binary values (0/1) items, well population stratum clusters (type, school, class).","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/gen_data_bin_complex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from the school population — gen_data_bin_complex","text":"","code":"if (FALSE) { pop <- make_population(2) gen_data_bin_srs(pop) gen_data_bin_strat(pop) gen_data_bin_clust(pop) gen_data_bin_strcl(pop) }"},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_true_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns theoretical true values — get_true_values","title":"Returns theoretical true values — get_true_values","text":"get_true_values() returns true values freely estimated theta values order: \\(\\lambda\\) (loadings), \\(\\rho\\) (factor correlations), \\(\\tau\\) (thresholds). get_theoretical_uni_bi_moments() returns univariate (pidot1) bivariate (pidot2) theoretical probabilities successes.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_true_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns theoretical true values — get_true_values","text":"","code":"get_true_values(model_no, arrange = c(\"lambda\", \"rho\", \"tau\"))  get_theoretical_uni_bi_moments(model_no, collapse = FALSE)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_true_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns theoretical true values — get_true_values","text":"model_no (integer) Choose 1--5. See pkgdown articles details. arrange true values arranged? default order loadings, factor correlations, thresholds. collapse (logical) vector returned instead list separating univariate bivariate quantities?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_true_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns theoretical true values — get_true_values","text":"vector true parameter values used simulations.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_true_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns theoretical true values — get_true_values","text":"","code":"get_true_values(1) #> lambda1 lambda2 lambda3 lambda4 lambda5    tau1    tau2    tau3    tau4    tau5  #>    0.80    0.70    0.47    0.38    0.34   -1.43   -0.55   -0.13   -0.72   -1.13  get_theoretical_uni_bi_moments(1) #> $pidot1 #> [1] 0.9236415 0.7088403 0.5517168 0.7642375 0.8707619 #>  #> $pidot2 #>  [1] 0.6874899 0.5311301 0.7213463 0.8143565 0.4368475 0.5714570 0.6356945 #>  [8] 0.4436331 0.4938743 0.6742887 #>"},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_uni_bi_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get univariate and bivariate moments — get_uni_bi_moments","title":"Get univariate and bivariate moments — get_uni_bi_moments","text":"Returns univariate bivariate moments (.e. positive probabilities ) based model .e. pidot1 pidot2 (weighted) sample .e. pdot1 pdot2.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_uni_bi_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get univariate and bivariate moments — get_uni_bi_moments","text":"","code":"get_uni_bi_moments(.lavobject)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_uni_bi_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get univariate and bivariate moments — get_uni_bi_moments","text":".lavobject lavaan::lavaan() fit object.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_uni_bi_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get univariate and bivariate moments — get_uni_bi_moments","text":"list univariate bivariate moments.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/get_uni_bi_moments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get univariate and bivariate moments — get_uni_bi_moments","text":"","code":"fit <- lavaan::sem(txt_mod(1), gen_data_bin(1, n = 500), std.lv = TRUE,                    estimator = \"PML\") get_uni_bi_moments(fit) #> $pdot1 #> [1] 0.930 0.708 0.554 0.788 0.854 #>  #> $pidot1 #> [1] 0.9300204 0.7082433 0.5540270 0.7879018 0.8539806 #>  #> $pdot2 #>  [1] 0.690 0.538 0.756 0.808 0.442 0.582 0.628 0.454 0.480 0.678 #>  #> $pidot2 #>  [1] 0.6925353 0.5386244 0.7508849 0.8063651 0.4342112 0.5857273 0.6229382 #>  [8] 0.4583138 0.4873445 0.6823309 #>"},{"path":"https://haziqj.ml/lavaan.bingof/reference/lavaan.bingof-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lavaan.bingof: Limited Information Goodness of Fit Tests for Binary Factor Models — lavaan.bingof-package","title":"lavaan.bingof: Limited Information Goodness of Fit Tests for Binary Factor Models — lavaan.bingof-package","text":"accompanying R package paper \"Goodness--fit tests composite likelihood estimation simple random complex survey sampling\". fitting binary factor model lavaan, user can call several functions compute goodness--fit test statistics based lower order marginals compute corresponding p-values.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/lavaan.bingof-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lavaan.bingof: Limited Information Goodness of Fit Tests for Binary Factor Models — lavaan.bingof-package","text":"Maintainer: Haziq Jamil haziq.jamil@gmail.com (ORCID) contributors: Irini Moustaki (ORCID) [contributor] Myrsini Katsikatsou [contributor]","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Limited information goodness-of-fit tests — ligof-test-stats","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"Limited information goodness--fit tests","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"","code":"Wald_test(object, approx_Omega2 = FALSE, svy_design = NULL)  Wald_diag_test(object, approx_Omega2 = FALSE, svy_design = NULL, .order = 3)  Wald_vcovf_test(object, svy_design = NULL)  Pearson_RS_test(object, approx_Omega2 = FALSE, svy_design = NULL, .order = 2)  Pearson_test(object, approx_Omega2 = FALSE, svy_design = NULL, .order = \"3\")  RSS_test(object, approx_Omega2 = FALSE, svy_design = NULL, .order = \"3\")  Multn_test(object, approx_Omega2 = FALSE, svy_design = NULL, .order = \"3\")"},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"object lavaan::lavaan() fit object. approx_Omega2 (logical)  approximate residual covariance matrix \\(\\Omega_2\\) used? Defaults FALSE. svy_design (optional) survey::svydesign() object. .order (integer) Either number moments match chi-square test statistic matching procedure (choose 1--3), Rao-Scott type adjustment order (choose 1 2).","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"data frame containing test statistics \\(X^2\\), degrees freedom, name test, \\(p\\)-value.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"Wald_test(): Wald test statistic. Wald_diag_test(): Wald test statistic using simple diagonal \\(\\Omega_2\\) matrix. Wald_vcovf_test(): Wald test statistic bypassing \\(\\Omega_2\\) matrix (uses orthogonal complements \\(\\Delta_2\\)). Pearson_RS_test(): Pearson test \\(p\\)-values calculated using Rao-Scott type adjustment. Pearson_test(): Pearson test \\(p\\)-values calculated using moment-matching procedure. RSS_test(): residual sum squares (RSS) test. Uses moment-matching \\(p\\)-value calculations. Multn_test(): multinomial test. Uses moment-matching \\(p\\)-value calculations.","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof-test-stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limited information goodness-of-fit tests — ligof-test-stats","text":"","code":"fit <- lavaan::sem(txt_mod(1), gen_data_bin(1, n = 500), std.lv = TRUE,                    estimator = \"PML\") Wald_test(fit) #>         X2 df name      pval Xi_rank  S #> 1 2.672036  5 Wald 0.7503919      13 15"},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof_sims.methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and summary methods for simulations — ligof_sims.methods","title":"Print and summary methods for simulations — ligof_sims.methods","text":"Print summary methods simulations","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof_sims.methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and summary methods for simulations — ligof_sims.methods","text":"","code":"# S3 method for ligof_sims print(x, ...)  # S3 method for ligof_sims summary(object, alpha = 0.05, ...)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof_sims.methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and summary methods for simulations — ligof_sims.methods","text":"x, object output run_ligof_sims(). ... used. alpha (numeric) significance level test.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/ligof_sims.methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print and summary methods for simulations — ligof_sims.methods","text":"print() method displays useful information simulation study (number replications, time taken, model information, etc.). output summary() tibble() summarising rejection rate alpha level test. convenience, summary() displays table command line interface.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/make_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate the school population data set — make_population","title":"Simulate the school population data set — make_population","text":"Simulate school population data set","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/make_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate the school population data set — make_population","text":"","code":"make_population(model_no = 1, seed = 123, H1 = FALSE, return_all = FALSE)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/make_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate the school population data set — make_population","text":"model_no (integer) Choose 1--5. See pkgdown articles details. seed (numeric) random seed. H1 (logical) generating data misspecify true model? power simulations. return_all (logical) Return underlying latent variables (\\(y^*\\) \\(\\eta\\)) well? well?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/make_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate the school population data set — make_population","text":"tibble() containing ordinal binary values (0/1) items, well population stratum clusters (type, school, class).","code":""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/reference/make_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate the school population data set — make_population","text":"","code":"if (FALSE) { make_population(1) }"},{"path":"https://haziqj.ml/lavaan.bingof/reference/run_ligof_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","title":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","text":"Wrapper function Type 1 Power simulations","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/run_ligof_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","text":"","code":"run_ligof_sims(   model_no = 1,   nsim = 1000,   samp_size = 1000,   samp = c(\"srs\", \"strat\", \"clust\", \"strcl\", \"strat2\"),   simtype = c(\"type1\", \"power\"),   starting_seed = 16423,   ncores = parallel::detectCores() - 2,   pop_Sigma = FALSE,   bootstrap = FALSE,   nboot = 1000 )"},{"path":"https://haziqj.ml/lavaan.bingof/reference/run_ligof_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","text":"model_no (integer) Choose 1--5. See pkgdown articles details. nsim (integer) number simulations conduct. samp_size (integer) exact sample size SRS simulations stratified sampling; otherwise average sample size complex sampling methods. samp (character) Choose sampling method simulated data. One srs, strat, clust strcl. simtype (character) Whether type1 simulation power simulation. starting_seed (integer) starting random seed. ncores (integer) number cores use parallelisation. pop_Sigma (boolean) population value multinomial covariance matrix used, estimated? bootstrap (boolean) Use svyrep package compute bootstrap variance estimator? nboot (integer) Optional bootstrap = TRUE many bootstrap replications?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/run_ligof_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","text":"list tibble()s output all_tests().","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/run_ligof_sims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper function for Type 1 and Power simulations — run_ligof_sims","text":"","code":"if (FALSE) { library(tidyverse) library(lavaan.bingof) library(survey) analysis_path <- dirname(rstudioapi::getSourceEditorContext()$path)  # Run all scenarios described in manuscript for (sim_type in c(\"type1\", \"power\")) {   for (samp_method in c(\"srs\", \"strat\", \"clust\", \"strcl\")) {     for (the_samp_size in c(500, 1000, 2000, 3000)) {       for (mod_no in 1:5) {         sim_name <- paste0(samp_method, mod_no, \"_n\", the_samp_size, \"_\",                            sim_type)         cat(\"[\", as.character(Sys.time()), \"]\", \"Now running simulation\",             sim_name, \"\\n\")         sim <- run_ligof_sims(mod_no, samp_size = the_samp_size,                               samp = samp_method, simtype = sim_type)         invisible(list2env(setNames(list(sim), sim_name), envir = .GlobalEnv))         save(list = sim_name, file = paste0(analysis_path, \"/Rsave/\",                                             sim_name, \".RData\"))       }     }   } } }"},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarised simulation results — sim_results","title":"Summarised simulation results — sim_results","text":"Summarised simulation results","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarised simulation results — sim_results","text":"","code":"res_srs_type1  res_srs_power  res_complex_type1  res_complex_power"},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Summarised simulation results — sim_results","text":"tibble() containing summarised results simulation study segregated test name (Wald, Wald V2, etc.), model (1F 5V, 1F 8V, etc.), sample size. n_sim number replications. n_converged number replications lavaan::lavaan() converged. n_rank_def number replications rank \\(\\Omega_2\\) matrix found deficient. rej_rate_x proportions replications null hypothesis rejected x% level.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw simulation results — sim_results_all","title":"Raw simulation results — sim_results_all","text":"Raw simulation results","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw simulation results — sim_results_all","text":"","code":"all_res"},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results_all.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw simulation results — sim_results_all","text":"list length 160, containing large tibble() raw results.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/sim_results_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw simulation results — sim_results_all","text":"simulation study, varied following settings: Data generation mechanism: srs, strat, clust, strcl Sample size: 500, 1000, 2000, 3000 Factor model: 5 models various number items latent factors. See article details. Simulation type: Type error analysis Power analysis Thus, total \\(4 \\times 4 \\times 5 \\times 2 = 160\\) unique simulation scenarios. R object all_res list length 160 entry containing tibble() raw results (test statistic value, degrees freedom, name test, p-value, convergence, matrix ranks, random seed) scenario. Note 7 tests total investigated, scenario replicated total 1000 times.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create transformation matrices — transformation-matrices","title":"Create transformation matrices — transformation-matrices","text":"derived limited information test statistics involves design matrices act transformations larger \\(2^p\\) response pattern space lower order univariate bivariate marginals. create_G_mat() returns \\(\\tilde R \\times R\\) indicator matrix obtain pairwise components. create_T2_mat() returns \\(p(p+1)/2 \\times 2^p\\) indicator matrix \\(T_2\\) pick unviariate bivariate moments response patterns. create_Beta_mat() returns \\(4p \\times p(p+1)/2\\) design matrix \\(\\Beta\\) described manuscript (used express parameters terms residuals). Note ordering similar ordering create_resp_pattern(). design matrices currently apply binary data. See technical documents details.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create transformation matrices — transformation-matrices","text":"","code":"create_G_mat(p = 3)  create_T2_mat(p = 3)  create_Beta_mat(p = 3)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create transformation matrices — transformation-matrices","text":"p (integer > 0) number items.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create transformation matrices — transformation-matrices","text":"matrix. Additionally, may inspect attributes regarding ordering pairwise components \\(G\\) matrix.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create transformation matrices — transformation-matrices","text":"Myrsini Katsikatsou (create_Beta_mat())","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/transformation-matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create transformation matrices — transformation-matrices","text":"","code":"create_G_mat(p = 3) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #>  [1,]   -1   -1   -1   -1   -1   -1    0    0 #>  [2,]    0    0    1    1    0    0    0    0 #>  [3,]    0    0    0    0    1    1    0    0 #>  [4,]    1    1    0    0    0    0    0    0 #>  [5,]   -1   -1   -1   -1   -1    0   -1    0 #>  [6,]    0    1    0    1    0    0    0    0 #>  [7,]    0    0    0    0    1    0    1    0 #>  [8,]    1    0    1    0    0    0    0    0 #>  [9,]   -1   -1   -1    0   -1   -1   -1    0 #> [10,]    0    1    0    0    0    1    0    0 #> [11,]    0    0    1    0    0    0    1    0 #> [12,]    1    0    0    0    1    0    0    0 #> attr(,\"pairwise\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 create_T2_mat(p = 3) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    1    1    1    0    0    0    0 #> [2,]    1    1    0    0    1    1    0    0 #> [3,]    1    0    1    0    1    0    1    0 #> [4,]    1    1    0    0    0    0    0    0 #> [5,]    1    0    1    0    0    0    0    0 #> [6,]    1    0    0    0    1    0    0    0 create_Beta_mat(p = 3) #>       [,1] [,2] [,3] [,4] [,5] [,6] #>  [1,]   -1   -1    0    1    0    0 #>  [2,]    1    0    0   -1    0    0 #>  [3,]    0    1    0   -1    0    0 #>  [4,]    0    0    0    1    0    0 #>  [5,]   -1    0   -1    0    1    0 #>  [6,]    1    0    0    0   -1    0 #>  [7,]    0    0    1    0   -1    0 #>  [8,]    0    0    0    0    1    0 #>  [9,]    0   -1   -1    0    0    1 #> [10,]    0    1    0    0    0   -1 #> [11,]    0    0    1    0    0   -1 #> [12,]    0    0    0    0    0    1"},{"path":"https://haziqj.ml/lavaan.bingof/reference/txt_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to return the textual model for lavaan fit — txt_mod","title":"Function to return the textual model for lavaan fit — txt_mod","text":"Function return textual model lavaan fit","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/txt_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to return the textual model for lavaan fit — txt_mod","text":"","code":"txt_mod(model_no = 1L)"},{"path":"https://haziqj.ml/lavaan.bingof/reference/txt_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to return the textual model for lavaan fit — txt_mod","text":"model_no (integer) Choose 1--5. See pkgdown articles details.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/txt_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to return the textual model for lavaan fit — txt_mod","text":"Character vector factor model input lavaan::lavaan().","code":""},{"path":"https://haziqj.ml/lavaan.bingof/reference/txt_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to return the textual model for lavaan fit — txt_mod","text":"","code":"txt_mod(1) #> [1] \"eta1 =~ NA*y1 + y2 + y3 + y4 + y5\" txt_mod(2) #> [1] \"eta1 =~ NA*y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8\" txt_mod(3) #> [1] \"eta1 =~ NA*y1 +  y2 +  y3 +  y4 +  y5 +\\n                                        y6 +  y7 +  y8 +  y9 + y10 +\\n                                       y11 + y12 + y13 + y14 + y15\" txt_mod(4) #> [1] \"eta1 =~ NA*y1 + y2 + y3 + y4 + y5\\n                             eta2 =~ NA*y6 + y7 + y8 + y9 + y10\" txt_mod(5) #> [1] \"eta1 =~  NA*y1 +  y2 +  y3 +  y4 +  y5\\n                             eta2 =~  NA*y6 +  y7 +  y8 +  y9 + y10\\n                             eta3 =~ NA*y11 + y12 + y13 + y14 + y15\""},{"path":[]},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version","dir":"Changelog","previous_headings":"","what":"2023-06-04","title":"lavaan.bingof (development version)","text":"Rewrote function estimating complex multinomial matrix Σ uses method survey package. (Although one package work well p = 15 S = 120). Added bootstrap functionality finding complex multinomial matrix. uses bootstrap sampling functionality svrep package. Increment package version 0.1.1","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-1","dir":"Changelog","previous_headings":"","what":"2023-05-12","title":"lavaan.bingof (development version)","text":"Bug gen_data_bin_strat() function. ignores sample size argument n simulations actually using sample size. Update simulation results accordingly.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-2","dir":"Changelog","previous_headings":"","what":"2023-04-15","title":"lavaan.bingof (development version)","text":"Added test suite package. Change notation: test statistic (previously W) now denoted X2. makes sense generally chi-square variates. Avoids confusion ‘weights’.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-3","dir":"Changelog","previous_headings":"","what":"2023-04-14","title":"lavaan.bingof (development version)","text":"Fixed bug lavaan.bingof:::create_Sigma2_matrix_complex() loop strata. Fixed bug lavaan.bingof:::extract_lavaan_info() extract 2p proportion tables. wonder simulations ran slow… oops. Now using MASS::ginv inverting Ξ weights. sure good idea? really affects Wald test Multinomial test (apparently anyway). Re-ran simulations Wald Wald V3 performs poorly rank weight matrix Ξ rank deficient. Noticed occurs often complex sampling Σ2 matrix full rank.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-4","dir":"Changelog","previous_headings":"","what":"2023-04-08","title":"lavaan.bingof (development version)","text":"Create R package lavaan.bingof easier shipment R codes implement goodness--fit tests. Migrate bookdown format presentation pkgdown articles. Previous repo haziqj/gof-comp-lik accompanying website likely shutdown.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-5","dir":"Changelog","previous_headings":"","what":"2023-04-01","title":"lavaan.bingof (development version)","text":"discussions, decide stratify population based latent variable η. See technical details clarification. turn, missing component proper estimation multinomial matrix Σ using sampling weights. Finally, complex sampling simulation works!","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-6","dir":"Changelog","previous_headings":"","what":"2023-03-22","title":"lavaan.bingof (development version)","text":"Experimenting different complex sampling scheme, whereby population determined multiple variable including stratum-level, cluster-level, individual characteristics (called shape, colour, “mystery”). Inspired blog post “Estimating relative risk simulated complex survey @ellis2013nz”. However, generating data way makes population highly misspecified, none test statistics work.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-7","dir":"Changelog","previous_headings":"","what":"2023-02-26","title":"lavaan.bingof (development version)","text":"Wrote technical details section derivation test statistics using maximum likelihood estimation pairwise maximum likelihood estimation. Consequently R code rewritten efficiency. Degree freedom calculation via Rao-Scott type adjustment moment matching. New tests: Wald V3, RSS Multinomial.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-8","dir":"Changelog","previous_headings":"","what":"2023-02-20","title":"lavaan.bingof (development version)","text":"Decided basic stratified sampling procedure, population consists 50 strata varying population size within stratum. number PSU selected 20 total sample size 1000. create homogeneity within stratum, stratum level random effect generated. Although bias reduced sampling weights used, test statistics values still suspect.","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2023-development-version-9","dir":"Changelog","previous_headings":"","what":"2023-01-25","title":"lavaan.bingof (development version)","text":"long hiatus, revisit sampling weights problem. Successfully modified relevant parts lavaan sampling weights can used. objective function (minimised) now takes normalised weights instead frequency counts. See github.com/haziqj/lavaan install fork lavaan Next problem best generate complex sample?","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2021-development-version","dir":"Changelog","previous_headings":"","what":"2021-09-25","title":"lavaan.bingof (development version)","text":"Simulation results reproduced SRS case. Unable proceed complex sampling case lavaan accept sampling.weights estimator = \"PML\".","code":""},{"path":"https://haziqj.ml/lavaan.bingof/news/index.html","id":"id_2021-development-version-1","dir":"Changelog","previous_headings":"","what":"2021-08-29","title":"lavaan.bingof (development version)","text":"Inherit R scripts rewrite reproducibility. R code tested.","code":""}]
