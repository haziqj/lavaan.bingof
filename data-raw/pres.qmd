---
title: "Plots for presentation"
format: 
  beamer:
    keep-tex: true
    cite-method: biblatex
bibliography: references.bib
biblio-style: apa
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = FALSE, fig.path = "figure/", fig.width = 6.5, fig.height = 4.5, out.width = "100%", warning = FALSE)
library(tidyverse)
theme_set(theme_bw())
library(lavaan.bingof)
library(jcolors)
load("../vignettes/articles/simplots.RData")

# Functions for plotting -------------------------------------------------------
grab_sims <- function(x = all_res, samp = "srs", type = "type1",
                      the_n = c(500, 1000, 2500, 5000, 10000)) {
  mod_names <- c("1F 5V", "1F 8V", "1F 15V", "2F 10V", "3F 15V")

  type_of_sampling <- grepl(samp, names(x))
  type_of_analysis <- grepl(type, names(x))
  res <- list(NULL)

  for (n in the_n) {
    type_of_n <- grepl(paste0("n", n, "_"), names(x))
    ind <- which(type_of_sampling & type_of_analysis & type_of_n)
    tmp <- NULL
    for (i in seq_along(ind)) {
      tmp <- bind_rows(tmp, bind_cols(x[[ind[i]]], n = n, sim = mod_names[i]))
    }
    res <- c(res, list(tmp))
  }

  do.call("bind_rows", res) %>%
    mutate(sim = factor(sim, levels = unique(sim)),
           name = factor(name, levels = unique(name)),
           alpha10 = pval < 0.1,
           alpha5 = pval < 0.05,
           alpha1 = pval < 0.01)
}

summarise_sims <- function(samp = "srs", type = "type1") {
  grab_sims(samp = samp, type = type) %>%
    drop_na(sim) %>%
    group_by(name, sim, n) %>%
    summarise(n_sims = n(),
              n_converged = sum(converged),
              n_rank_def = sum(Omega2_rank < S),
              rej_rate10 = mean(alpha10[converged], na.rm = TRUE),
              crit10 = qnorm(0.975) * sqrt(rej_rate10 * (1 - rej_rate10) /
                                             n_converged),
              rej_rate5 = mean(alpha5[converged], na.rm = TRUE),
              crit5 = qnorm(0.975) * sqrt(rej_rate5 * (1 - rej_rate5) /
                                            n_converged),
              rej_rate1 = mean(alpha1[converged], na.rm = TRUE),
              crit1 = qnorm(0.975) * sqrt(rej_rate1 * (1 - rej_rate1) /
                                            n_converged),
              .groups = "drop")
}

res_srs_type1 <- summarise_sims("srs", "type1")
res_srs_power <- summarise_sims("srs", "power")

srs_plot <- function(x = res_srs_type1, alpha = 10, dashed_line = TRUE,
                     plot_title = "Type I errors",
                     exclude_tests = c("RSS,MM3", "Multn,MM3")) {
  var_name <- paste0("rej_rate", alpha)
  crit_name <- paste0("crit", alpha)

  x <- x %>%
    filter(!name %in% exclude_tests)

  # Remove MM3
  ori_levs <- levels(x$name)
  mod_levs <- gsub(",MM3", "", ori_levs)
  levels(x$name) <- mod_levs
  
  p <- ggplot(x, aes(n, .data[[var_name]], col = name, shape = name))
  if (isTRUE(dashed_line)) {
    p <- p + geom_hline(yintercept = alpha / 100, linetype = "dashed",
                        col = "grey50")
  }
  p +
    # geom_ribbon(aes(ymin = .data[[var_name]] - .data[[crit_name]],
    #                 ymax = .data[[var_name]] + .data[[crit_name]],
    #                 fill = name), col = NA, alpha = 0.1) +
    geom_point() +
    geom_line() +
    facet_wrap(. ~ sim, ncol = 3) +
    scale_x_continuous(breaks = unique(res_srs_type1$n)) +
    scale_shape_manual(values = c(16, 17, 15, 3, 7, 8, 11, 16, 17, 15, 3, 7)) +
    scale_alpha("% rank def.", range = c(1, 0.3)) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1),
          legend.position = c(0.85, 0.2)) +
    labs(x = "Sample size (n)", y = "Rejection proportion", col = NULL,
         fill = NULL,
         shape = NULL, title = as.expression(bquote(
           .(plot_title)~"("*alpha~"="~.(iprior::dec_plac(alpha/100, 2))*")"
         ))) +
    guides(col = guide_legend(ncol = 2), shape = guide_legend(ncol = 2)) +
    # scale_colour_viridis_d(option = "turbo", direction = -1) +
    # scale_fill_viridis_d(option = "turbo", direction = -1) +
    jcolors::scale_colour_jcolors(palette = "pal8") +
    jcolors::scale_fill_jcolors(palette = "pal8")
}

srs_plot2 <- function(x = res_srs_type1, alpha = 5, dashed_line = TRUE,
                      plot_title = "Type I errors",
                      exclude_tests = c("RSS,MM3", "Multn,MM3")) {
  var_name <- paste0("rej_rate", alpha)
  crit_name <- paste0("crit", alpha)

  x <- x %>%
    filter(!name %in% exclude_tests) %>%
    mutate(sim = factor(sim, labels = c("1*F~5*V", "1*F~8*V", "1*F~15*V",
                                        "2*F~10*V", "3*F~15*V")),
           name = factor(name, levels = rev(levels(name))),
           ok = !(!is.na(.data[[var_name]]) & !(abs(.data[[var_name]] - alpha / 100) < .data[[crit_name]])),
           N = factor(n))
  
  # Remove MM3
  ori_levs <- levels(x$name)
  mod_levs <- gsub(",MM3", "", ori_levs)
  levels(x$name) <- mod_levs

  p <- ggplot(x, aes(.data[[var_name]], name, col = ok, shape = N)) +
    geom_vline(aes(xintercept = alpha / 100), linetype = "dashed") +
    geom_pointrange(aes(xmin = .data[[var_name]] - .data[[crit_name]],
                        xmax = .data[[var_name]] + .data[[crit_name]]),
                    position = position_dodge(width = 0.5),
                    alpha = 0.8) +
    facet_grid(. ~ sim, labeller = label_parsed) +
    scale_colour_manual(values = c("red3", "gray20")) +
    # jcolors::scale_colour_jcolors() +
    # scale_alpha_manual(values = c(0.4, 1)) +
    # scale_x_continuous(breaks = alpha / 100) +
    scale_shape_manual(values = c(16, 17, 15, 4, 1, 2)) +
    labs(x = "Rejection rate", y = NULL, alpha = "Within\n95% interval",
         shape = "Sample size", col = "Within\n95% interval") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  p
}
```

# SRS Type I Errors ($\alpha=5\%$)

```{r p_srs_type1_5}
srs_plot2(res_srs_type1, alpha = 5, exclude_tests = NA) +
  scale_x_continuous(breaks = c(0, 0.025, 0.05, 0.075))
```

# SRS Power Analysis ($\alpha=5\%$)

```{r p_srs_power_5}
srs_plot(res_srs_power, alpha = 5, dashed_line = FALSE,
         plot_title = "Power", exclude_tests = NA) +
  scale_colour_viridis_d(option = "turbo", direction = -1) +
  scale_fill_viridis_d(option = "turbo", direction = -1) +
  ggtitle(NULL)
```

# Complex Type I Errors ($\alpha=5\%$)

```{r p_complex_type1_5a}
alpha <- 5
var_name <- paste0("rej_rate", alpha)
crit_name <- paste0("crit", alpha)

res_complex_type1 %>%
  filter(sampling != "Stratified") %>%
  mutate(sampling = factor(sampling, labels = c("Two-stage cluster",
                                                "Two-stage stratified cluster"))) %>%
  mutate(n = factor(n, labels = paste0("n =\n", unique(.data$n))),
         name = factor(name, labels = gsub(",MM3", "", levels(name)))) %>%
  ggplot(aes(n, rej_rate5, fill = name,
             # alpha = n_rank_def / .data$n_sims[1] * 100
             )) +
  geom_bar(stat = "identity", position = "dodge", width = 0.9,
           alpha = 0.8) +
  geom_errorbar(aes(ymin = .data[[var_name]] - .data[[crit_name]],
                    ymax = .data[[var_name]] + .data[[crit_name]]),
                col = "black", width = 0.2, alpha = 1,
                position = position_dodge(width = 0.9)) +
  geom_hline(aes(yintercept = alpha / 100, linetype = "Nominal\nrej. level")) +
  scale_linetype_manual(NULL, values = "dashed") +
  scale_alpha("% rank\ndef.", range = c(1, 0.5)) +
  theme(legend.position = "top") +
  labs(x = NULL, y = "Rejection proportion", fill = NULL, shape = NULL) +
  guides(fill = guide_legend(nrow = 1, order = 1),
         alpha = guide_legend(ncol = 3, order = 2)) +
  scale_fill_viridis_d(option = "turbo", direction = -1) +
  # scale_fill_grey() +
  facet_grid(sim ~ sampling) +
  coord_cartesian(ylim = c(0, 0.15)) -> p1; p1
```

# Complex Power Analysis ($\alpha=5\%$)

```{r p_complex_power_5a}
res_complex_power %>%
  filter(sampling != "Stratified") %>%
  mutate(sampling = factor(sampling, labels = c("Two-stage cluster",
                                                "Two-stage stratified cluster")),
         name = factor(name, labels = gsub(",MM3", "", levels(name))),
         name = factor(name, labels = gsub("Multn", "Multinomial", levels(name)))) %>%
  mutate(n = factor(n, labels = paste0("n =\n", unique(.data$n)))) %>%
  ggplot(aes(n, rej_rate5, fill = name,
             #alpha = n_rank_def / .data$n_sims[1] * 100
             )) +
  geom_bar(stat = "identity", position = "dodge", width = 0.9, alpha = 0.8) +
  geom_errorbar(aes(ymin = .data[[var_name]] - .data[[crit_name]],
                    ymax = .data[[var_name]] + .data[[crit_name]]),
                col = "black", width = 0.2, alpha = 1,
                position = position_dodge(width = 0.9)) +
  scale_linetype_manual(NULL, values = "dashed") +
  scale_alpha("% rank\ndef.", range = c(1, 0.5)) +
  theme(legend.position = "top") +
  labs(x = "Sample size", y = "Rejection proportion", fill = NULL, shape = NULL) +
  guides(fill = guide_legend(nrow = 1, order = 1),
         alpha = guide_legend(ncol = 3, order = 2)) +
  scale_fill_viridis_d(option = "turbo", direction = -1) +
  # scale_fill_grey() +
  facet_grid(sim ~ sampling) +
  coord_cartesian(ylim = c(0, 1)) -> p2; p2
```

# Software

-   Weighted pairwise likelihood estimation is now [available](https://github.com/yrosseel/lavaan/pull/308) in the R package `{lavaan}` [@rosseel2012] as of v0.6-17.1946.
-   Suppose we have a `Data` set of items `y1,...,y5` with design weights `wt`, then the syntax to fit is

``` r
fit <- cfa(model = "eta =~ y1 + y2 + y3 + y4 + y5", 
           data = Data, estimator = "PML", 
           sampling.weights = "wt")
```
